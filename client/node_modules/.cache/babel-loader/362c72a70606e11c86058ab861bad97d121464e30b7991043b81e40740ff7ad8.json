{"ast":null,"code":"import { getTransactionCount } from '../actions/public/getTransactionCount.js';\nimport { LruMap } from './lru.js';\n/**\n * Creates a nonce manager for auto-incrementing transaction nonces.\n *\n * - Docs: https://viem.sh/docs/accounts/createNonceManager\n *\n * @example\n * ```ts\n * const nonceManager = createNonceManager({\n *   source: jsonRpc(),\n * })\n * ```\n */\nexport function createNonceManager(parameters) {\n  const {\n    source\n  } = parameters;\n  const deltaMap = new Map();\n  const nonceMap = new LruMap(8192);\n  const promiseMap = new Map();\n  const getKey = _ref => {\n    let {\n      address,\n      chainId\n    } = _ref;\n    return `${address}.${chainId}`;\n  };\n  return {\n    async consume(_ref2) {\n      let {\n        address,\n        chainId,\n        client\n      } = _ref2;\n      const key = getKey({\n        address,\n        chainId\n      });\n      const promise = this.get({\n        address,\n        chainId,\n        client\n      });\n      this.increment({\n        address,\n        chainId\n      });\n      const nonce = await promise;\n      await source.set({\n        address,\n        chainId\n      }, nonce);\n      nonceMap.set(key, nonce);\n      return nonce;\n    },\n    async increment(_ref3) {\n      let {\n        address,\n        chainId\n      } = _ref3;\n      const key = getKey({\n        address,\n        chainId\n      });\n      const delta = deltaMap.get(key) ?? 0;\n      deltaMap.set(key, delta + 1);\n    },\n    async get(_ref4) {\n      let {\n        address,\n        chainId,\n        client\n      } = _ref4;\n      const key = getKey({\n        address,\n        chainId\n      });\n      let promise = promiseMap.get(key);\n      if (!promise) {\n        promise = (async () => {\n          try {\n            const nonce = await source.get({\n              address,\n              chainId,\n              client\n            });\n            const previousNonce = nonceMap.get(key) ?? 0;\n            if (previousNonce > 0 && nonce <= previousNonce) return previousNonce + 1;\n            nonceMap.delete(key);\n            return nonce;\n          } finally {\n            this.reset({\n              address,\n              chainId\n            });\n          }\n        })();\n        promiseMap.set(key, promise);\n      }\n      const delta = deltaMap.get(key) ?? 0;\n      return delta + (await promise);\n    },\n    reset(_ref5) {\n      let {\n        address,\n        chainId\n      } = _ref5;\n      const key = getKey({\n        address,\n        chainId\n      });\n      deltaMap.delete(key);\n      promiseMap.delete(key);\n    }\n  };\n}\n/** JSON-RPC source for a nonce manager. */\nexport function jsonRpc() {\n  return {\n    async get(parameters) {\n      const {\n        address,\n        client\n      } = parameters;\n      return getTransactionCount(client, {\n        address,\n        blockTag: 'pending'\n      });\n    },\n    set() {}\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////\n// Default\n/** Default Nonce Manager with a JSON-RPC source. */\nexport const nonceManager = /*#__PURE__*/createNonceManager({\n  source: jsonRpc()\n});","map":{"version":3,"names":["getTransactionCount","LruMap","createNonceManager","parameters","source","deltaMap","Map","nonceMap","promiseMap","getKey","_ref","address","chainId","consume","_ref2","client","key","promise","get","increment","nonce","set","_ref3","delta","_ref4","previousNonce","delete","reset","_ref5","jsonRpc","blockTag","nonceManager"],"sources":["/Users/emmanasseri/Desktop/my-own-words/node_modules/viem/utils/nonceManager.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport { getTransactionCount } from '../actions/public/getTransactionCount.js'\nimport type { Client } from '../clients/createClient.js'\nimport type { MaybePromise } from '../types/utils.js'\nimport { LruMap } from './lru.js'\n\nexport type CreateNonceManagerParameters = {\n  source: NonceManagerSource\n}\n\ntype FunctionParameters = {\n  address: Address\n  chainId: number\n}\n\nexport type NonceManager = {\n  /** Get and increment a nonce. */\n  consume: (\n    parameters: FunctionParameters & { client: Client },\n  ) => Promise<number>\n  /** Increment a nonce. */\n  increment: (chainId: FunctionParameters) => void\n  /** Get a nonce. */\n  get: (chainId: FunctionParameters & { client: Client }) => Promise<number>\n  /** Reset a nonce. */\n  reset: (chainId: FunctionParameters) => void\n}\n\n/**\n * Creates a nonce manager for auto-incrementing transaction nonces.\n *\n * - Docs: https://viem.sh/docs/accounts/createNonceManager\n *\n * @example\n * ```ts\n * const nonceManager = createNonceManager({\n *   source: jsonRpc(),\n * })\n * ```\n */\nexport function createNonceManager(\n  parameters: CreateNonceManagerParameters,\n): NonceManager {\n  const { source } = parameters\n\n  const deltaMap = new Map()\n  const nonceMap = new LruMap<number>(8192)\n  const promiseMap = new Map<string, Promise<number>>()\n\n  const getKey = ({ address, chainId }: FunctionParameters) =>\n    `${address}.${chainId}`\n\n  return {\n    async consume({ address, chainId, client }) {\n      const key = getKey({ address, chainId })\n      const promise = this.get({ address, chainId, client })\n\n      this.increment({ address, chainId })\n      const nonce = await promise\n\n      await source.set({ address, chainId }, nonce)\n      nonceMap.set(key, nonce)\n\n      return nonce\n    },\n    async increment({ address, chainId }) {\n      const key = getKey({ address, chainId })\n      const delta = deltaMap.get(key) ?? 0\n      deltaMap.set(key, delta + 1)\n    },\n    async get({ address, chainId, client }) {\n      const key = getKey({ address, chainId })\n\n      let promise = promiseMap.get(key)\n      if (!promise) {\n        promise = (async () => {\n          try {\n            const nonce = await source.get({ address, chainId, client })\n            const previousNonce = nonceMap.get(key) ?? 0\n            if (previousNonce > 0 && nonce <= previousNonce)\n              return previousNonce + 1\n            nonceMap.delete(key)\n            return nonce\n          } finally {\n            this.reset({ address, chainId })\n          }\n        })()\n        promiseMap.set(key, promise)\n      }\n\n      const delta = deltaMap.get(key) ?? 0\n      return delta + (await promise)\n    },\n    reset({ address, chainId }) {\n      const key = getKey({ address, chainId })\n      deltaMap.delete(key)\n      promiseMap.delete(key)\n    },\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// Sources\n\nexport type NonceManagerSource = {\n  /** Get a nonce. */\n  get(parameters: FunctionParameters & { client: Client }): MaybePromise<number>\n  /** Set a nonce. */\n  set(parameters: FunctionParameters, nonce: number): MaybePromise<void>\n}\n\n/** JSON-RPC source for a nonce manager. */\nexport function jsonRpc(): NonceManagerSource {\n  return {\n    async get(parameters) {\n      const { address, client } = parameters\n      return getTransactionCount(client, {\n        address,\n        blockTag: 'pending',\n      })\n    },\n    set() {},\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////\n// Default\n\n/** Default Nonce Manager with a JSON-RPC source. */\nexport const nonceManager = /*#__PURE__*/ createNonceManager({\n  source: jsonRpc(),\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}