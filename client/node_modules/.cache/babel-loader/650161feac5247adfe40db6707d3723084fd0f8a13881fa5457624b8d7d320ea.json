{"ast":null,"code":"import React from\"react\";import{CircularProgressbar,buildStyles}from\"react-circular-progressbar\";import{Box}from\"@chakra-ui/react\";import\"react-circular-progressbar/dist/styles.css\";/*\n  Example IPA JSON Format (utilizes a subset of on-chain terms):\n  {\n    \"IPID\": \"0xa3BF0eF933f3A1DB17CFb35b1A7b3Dac91149F4b\",\n    \"creationDate\": \"2022-04-20 12:00:00\",\n    \"licenseFlavor\": \"Non-Commercial Social Remixing\", # The type of license the IP Asset has\n    \"commercialUse\": false,  # You can make money from using the original IP Asset, subject to limitations below.\n    \"commercialAttribution\": false,  # If true, people must give credit to the original work in their commercial application (eg. merch)\n    \"derivativesAllowed\": true,  # If true, people can make remixes, adaptations, or other derivative works based on the original IP Asset\n    \"derivativesAttribution\": true,  # If true, people must give credit to the original work in their derivative works\n    \"raw_text\": \"This is the original text of the IP Asset.\" # The original text of the IP Asset\n  }\n*/import{jsx as _jsx}from\"react/jsx-runtime\";const test_primary_author_IPA={\"IPID\":\"0xa3BF0eF933f3A1DB17CFb35b1A7b3Dac91149F4b\",\"creationDate\":\"2022-04-20 12:00:00\",\"licenseFlavor\":\"Non-Commercial Social Remixing\",\"commercialUse\":false,\"commercialAttribution\":false,\"derivativesAllowed\":true,\"derivativesAttribution\":true,\"raw_text\":\"This is the original text of the IP Asset.\"};const test_secondary_author_IPA={\"IPID\":\"0x3aDf0eF933f3A1DB17CFb35b1A7b3Dac91149F4b\",\"creationDate\":\"2022-04-20 12:00:00\",\"licenseFlavor\":\"Non-Commercial Social Remixing\",\"commercialUse\":false,\"commercialAttribution\":false,\"derivativesAllowed\":true,\"derivativesAttribution\":true,\"raw_text\":\"This is the original text of the IP Asset.\"};const test_claim=\"The secondary author has plagiarized the primary author's work.\";async function callGPT(_ref){let{primary_author_IPA,secondary_author_IPA,claim}=_ref;const API_KEY=process.env.REACT_APP_GPT_API_KEY;console.log(\"key:\",API_KEY);const API_URL='https://api.openai.com/v1/chat/completions';console.log(API_URL);console.log(\"primary_author_IPA:\",JSON.stringify(primary_author_IPA));console.log(\"secondary_author_IPA:\",JSON.stringify(secondary_author_IPA));console.log(\"claim:\",claim);try{const response=await fetch(API_URL,{method:'POST',headers:{'Authorization':`Bearer ${API_KEY}`,'Content-Type':'application/json'},body:JSON.stringify({model:'gpt-3.5-turbo-0125',// or 'gpt-3.5-turbo'\nmessages:[{role:'system',content:'You are an arbiter between a dispute of two assets on the Story Protocol. Please examine the IP assets, including all licensing terms and raw text. Return a JSON with (1) a 120 word analysis of the claim findings and (2) a percentage score of how confident you are that the claim is correct.'},{role:'user',content:`IPA of the author making the claim: ${JSON.stringify(primary_author_IPA)}. Other author IPA: ${JSON.stringify(secondary_author_IPA)}. Here is the claim of the disbute: ${claim}. Your job is to understand all metadata and raw text, return a JSON with (1) a 150 word analysis on the evaluation of the claim, and (2) give a specific percentage confidence score of how likely the claim is true.`}],max_tokens:150,// The maximum number of tokens in the response\ntemperature:0.7// Adjusts the creativity of the response\n})});if(response.ok){const data=await response.json();console.log(data.choices[0].message.content);}else{console.error('Failed to fetch data from OpenAI:',response.statusText);}}catch(error){console.error('Error calling ChatGPT API:',error);}}//callGPT({ primary_author_IPA: test_primary_author_IPA, secondary_author_IPA: test_secondary_author_IPA, claim: test_claim });\nconst ConfidenceScore=()=>{const percentage=42;// Hardcoded for now, will be a variable later\nreturn/*#__PURE__*/_jsx(Box,{overflow:\"hidden\",children:/*#__PURE__*/_jsx(CircularProgressbar,{value:percentage,text:`${percentage}%`,styles:buildStyles({pathColor:`rgba(62, 152, 199, ${percentage/100})`,textColor:\"#000\",trailColor:\"#d6d6d6\",backgroundColor:\"#f8f9fa\"})})});};export default ConfidenceScore;","map":{"version":3,"names":["React","CircularProgressbar","buildStyles","Box","jsx","_jsx","test_primary_author_IPA","test_secondary_author_IPA","test_claim","callGPT","_ref","primary_author_IPA","secondary_author_IPA","claim","API_KEY","process","env","REACT_APP_GPT_API_KEY","console","log","API_URL","JSON","stringify","response","fetch","method","headers","body","model","messages","role","content","max_tokens","temperature","ok","data","json","choices","message","error","statusText","ConfidenceScore","percentage","overflow","children","value","text","styles","pathColor","textColor","trailColor","backgroundColor"],"sources":["/Users/emmanasseri/Desktop/my-own-words/client/src/components/Disputes/ConfidenceScore.tsx"],"sourcesContent":["import React from \"react\";\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport { Box } from \"@chakra-ui/react\";\nimport theme from \"../../theme\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\n/*\n  Example IPA JSON Format (utilizes a subset of on-chain terms):\n  {\n    \"IPID\": \"0xa3BF0eF933f3A1DB17CFb35b1A7b3Dac91149F4b\",\n    \"creationDate\": \"2022-04-20 12:00:00\",\n    \"licenseFlavor\": \"Non-Commercial Social Remixing\", # The type of license the IP Asset has\n    \"commercialUse\": false,  # You can make money from using the original IP Asset, subject to limitations below.\n    \"commercialAttribution\": false,  # If true, people must give credit to the original work in their commercial application (eg. merch)\n    \"derivativesAllowed\": true,  # If true, people can make remixes, adaptations, or other derivative works based on the original IP Asset\n    \"derivativesAttribution\": true,  # If true, people must give credit to the original work in their derivative works\n    \"raw_text\": \"This is the original text of the IP Asset.\" # The original text of the IP Asset\n  }\n*/\n\nconst test_primary_author_IPA = {\n  \"IPID\": \"0xa3BF0eF933f3A1DB17CFb35b1A7b3Dac91149F4b\",\n  \"creationDate\": \"2022-04-20 12:00:00\",\n  \"licenseFlavor\": \"Non-Commercial Social Remixing\",\n  \"commercialUse\": false,\n  \"commercialAttribution\": false,\n  \"derivativesAllowed\": true,\n  \"derivativesAttribution\": true,\n  \"raw_text\": \"This is the original text of the IP Asset.\"\n};\n\nconst test_secondary_author_IPA = {\n  \"IPID\": \"0x3aDf0eF933f3A1DB17CFb35b1A7b3Dac91149F4b\",\n  \"creationDate\": \"2022-04-20 12:00:00\",\n  \"licenseFlavor\": \"Non-Commercial Social Remixing\",\n  \"commercialUse\": false,\n  \"commercialAttribution\": false,\n  \"derivativesAllowed\": true,\n  \"derivativesAttribution\": true,\n  \"raw_text\": \"This is the original text of the IP Asset.\"\n};\n\nconst test_claim = \"The secondary author has plagiarized the primary author's work.\";\n\nasync function callGPT({ primary_author_IPA, secondary_author_IPA, claim }: { primary_author_IPA: object; secondary_author_IPA: object; claim: string }) {\n  const API_KEY = process.env.REACT_APP_GPT_API_KEY;\n  console.log(\"key:\", API_KEY);\n  const API_URL = 'https://api.openai.com/v1/chat/completions';\n  console.log(API_URL);\n\n  console.log(\"primary_author_IPA:\", JSON.stringify(primary_author_IPA));\n  console.log(\"secondary_author_IPA:\", JSON.stringify(secondary_author_IPA));\n  console.log(\"claim:\", claim);\n\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo-0125', // or 'gpt-3.5-turbo'\n        messages: [\n          { role: 'system', content: 'You are an arbiter between a dispute of two assets on the Story Protocol. Please examine the IP assets, including all licensing terms and raw text. Return a JSON with (1) a 120 word analysis of the claim findings and (2) a percentage score of how confident you are that the claim is correct.' },\n          { role: 'user', content: `IPA of the author making the claim: ${JSON.stringify(primary_author_IPA)}. Other author IPA: ${JSON.stringify(secondary_author_IPA)}. Here is the claim of the disbute: ${claim}. Your job is to understand all metadata and raw text, return a JSON with (1) a 150 word analysis on the evaluation of the claim, and (2) give a specific percentage confidence score of how likely the claim is true.` }\n        ],\n        max_tokens: 150, // The maximum number of tokens in the response\n        temperature: 0.7, // Adjusts the creativity of the response\n      }),\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      console.log(data.choices[0].message.content);\n    } else {\n      console.error('Failed to fetch data from OpenAI:', response.statusText);\n    }\n  } catch (error) {\n    console.error('Error calling ChatGPT API:', error);\n  }\n}\n\n//callGPT({ primary_author_IPA: test_primary_author_IPA, secondary_author_IPA: test_secondary_author_IPA, claim: test_claim });\n\nconst ConfidenceScore: React.FC = () => {\n  const percentage = 42; // Hardcoded for now, will be a variable later\n\n  return (\n    <Box\n      overflow=\"hidden\"\n    >\n      <CircularProgressbar\n        value={percentage}\n        text={`${percentage}%`}\n        styles={buildStyles({\n          pathColor: `rgba(62, 152, 199, ${percentage / 100})`,\n          textColor: \"#000\",\n          trailColor: \"#d6d6d6\",\n          backgroundColor: \"#f8f9fa\",\n        })}\n      />\n    </Box>\n  );\n};\n\nexport default ConfidenceScore;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,mBAAmB,CAAEC,WAAW,KAAQ,4BAA4B,CAC7E,OAASC,GAAG,KAAQ,kBAAkB,CAEtC,MAAO,4CAA4C,CAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAZA,OAAAC,GAAA,IAAAC,IAAA,yBAcA,KAAM,CAAAC,uBAAuB,CAAG,CAC9B,MAAM,CAAE,4CAA4C,CACpD,cAAc,CAAE,qBAAqB,CACrC,eAAe,CAAE,gCAAgC,CACjD,eAAe,CAAE,KAAK,CACtB,uBAAuB,CAAE,KAAK,CAC9B,oBAAoB,CAAE,IAAI,CAC1B,wBAAwB,CAAE,IAAI,CAC9B,UAAU,CAAE,4CACd,CAAC,CAED,KAAM,CAAAC,yBAAyB,CAAG,CAChC,MAAM,CAAE,4CAA4C,CACpD,cAAc,CAAE,qBAAqB,CACrC,eAAe,CAAE,gCAAgC,CACjD,eAAe,CAAE,KAAK,CACtB,uBAAuB,CAAE,KAAK,CAC9B,oBAAoB,CAAE,IAAI,CAC1B,wBAAwB,CAAE,IAAI,CAC9B,UAAU,CAAE,4CACd,CAAC,CAED,KAAM,CAAAC,UAAU,CAAG,iEAAiE,CAEpF,cAAe,CAAAC,OAAOA,CAAAC,IAAA,CAAmI,IAAlI,CAAEC,kBAAkB,CAAEC,oBAAoB,CAAEC,KAAmF,CAAC,CAAAH,IAAA,CACrJ,KAAM,CAAAI,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,CACjDC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAEL,OAAO,CAAC,CAC5B,KAAM,CAAAM,OAAO,CAAG,4CAA4C,CAC5DF,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC,CAEpBF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEE,IAAI,CAACC,SAAS,CAACX,kBAAkB,CAAC,CAAC,CACtEO,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEE,IAAI,CAACC,SAAS,CAACV,oBAAoB,CAAC,CAAC,CAC1EM,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAEN,KAAK,CAAC,CAE5B,GAAI,CACF,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACJ,OAAO,CAAE,CACpCK,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,eAAe,CAAE,UAAUZ,OAAO,EAAE,CACpC,cAAc,CAAE,kBAClB,CAAC,CACDa,IAAI,CAAEN,IAAI,CAACC,SAAS,CAAC,CACnBM,KAAK,CAAE,oBAAoB,CAAE;AAC7BC,QAAQ,CAAE,CACR,CAAEC,IAAI,CAAE,QAAQ,CAAEC,OAAO,CAAE,qSAAsS,CAAC,CAClU,CAAED,IAAI,CAAE,MAAM,CAAEC,OAAO,CAAE,uCAAuCV,IAAI,CAACC,SAAS,CAACX,kBAAkB,CAAC,uBAAuBU,IAAI,CAACC,SAAS,CAACV,oBAAoB,CAAC,uCAAuCC,KAAK,wNAAyN,CAAC,CACpa,CACDmB,UAAU,CAAE,GAAG,CAAE;AACjBC,WAAW,CAAE,GAAK;AACpB,CAAC,CACH,CAAC,CAAC,CAEF,GAAIV,QAAQ,CAACW,EAAE,CAAE,CACf,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAZ,QAAQ,CAACa,IAAI,CAAC,CAAC,CAClClB,OAAO,CAACC,GAAG,CAACgB,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACP,OAAO,CAAC,CAC9C,CAAC,IAAM,CACLb,OAAO,CAACqB,KAAK,CAAC,mCAAmC,CAAEhB,QAAQ,CAACiB,UAAU,CAAC,CACzE,CACF,CAAE,MAAOD,KAAK,CAAE,CACdrB,OAAO,CAACqB,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CACpD,CACF,CAEA;AAEA,KAAM,CAAAE,eAAyB,CAAGA,CAAA,GAAM,CACtC,KAAM,CAAAC,UAAU,CAAG,EAAE,CAAE;AAEvB,mBACErC,IAAA,CAACF,GAAG,EACFwC,QAAQ,CAAC,QAAQ,CAAAC,QAAA,cAEjBvC,IAAA,CAACJ,mBAAmB,EAClB4C,KAAK,CAAEH,UAAW,CAClBI,IAAI,CAAE,GAAGJ,UAAU,GAAI,CACvBK,MAAM,CAAE7C,WAAW,CAAC,CAClB8C,SAAS,CAAE,sBAAsBN,UAAU,CAAG,GAAG,GAAG,CACpDO,SAAS,CAAE,MAAM,CACjBC,UAAU,CAAE,SAAS,CACrBC,eAAe,CAAE,SACnB,CAAC,CAAE,CACJ,CAAC,CACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAV,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}