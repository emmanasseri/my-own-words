{"ast":null,"code":"import { BaseError } from './base.js';\nexport class NegativeOffsetError extends BaseError {\n  constructor(_ref) {\n    let {\n      offset\n    } = _ref;\n    super(`Offset \\`${offset}\\` cannot be negative.`, {\n      name: 'NegativeOffsetError'\n    });\n  }\n}\nexport class PositionOutOfBoundsError extends BaseError {\n  constructor(_ref2) {\n    let {\n      length,\n      position\n    } = _ref2;\n    super(`Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`, {\n      name: 'PositionOutOfBoundsError'\n    });\n  }\n}\nexport class RecursiveReadLimitExceededError extends BaseError {\n  constructor(_ref3) {\n    let {\n      count,\n      limit\n    } = _ref3;\n    super(`Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`, {\n      name: 'RecursiveReadLimitExceededError'\n    });\n  }\n}","map":{"version":3,"names":["BaseError","NegativeOffsetError","constructor","_ref","offset","name","PositionOutOfBoundsError","_ref2","length","position","RecursiveReadLimitExceededError","_ref3","count","limit"],"sources":["/Users/emmanasseri/Desktop/my-own-words/node_modules/viem/errors/cursor.ts"],"sourcesContent":["import { BaseError } from './base.js'\n\nexport type NegativeOffsetErrorType = NegativeOffsetError & {\n  name: 'NegativeOffsetError'\n}\nexport class NegativeOffsetError extends BaseError {\n  constructor({ offset }: { offset: number }) {\n    super(`Offset \\`${offset}\\` cannot be negative.`, {\n      name: 'NegativeOffsetError',\n    })\n  }\n}\n\nexport type PositionOutOfBoundsErrorType = PositionOutOfBoundsError & {\n  name: 'PositionOutOfBoundsError'\n}\nexport class PositionOutOfBoundsError extends BaseError {\n  constructor({ length, position }: { length: number; position: number }) {\n    super(\n      `Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`,\n      { name: 'PositionOutOfBoundsError' },\n    )\n  }\n}\n\nexport type RecursiveReadLimitExceededErrorType =\n  RecursiveReadLimitExceededError & {\n    name: 'RecursiveReadLimitExceededError'\n  }\nexport class RecursiveReadLimitExceededError extends BaseError {\n  constructor({ count, limit }: { count: number; limit: number }) {\n    super(\n      `Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`,\n      { name: 'RecursiveReadLimitExceededError' },\n    )\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,WAAW;AAKrC,OAAM,MAAOC,mBAAoB,SAAQD,SAAS;EAChDE,YAAAC,IAAA,EAA0C;IAAA,IAA9B;MAAEC;IAAM,CAAsB,GAAAD,IAAA;IACxC,KAAK,CAAC,YAAYC,MAAM,wBAAwB,EAAE;MAChDC,IAAI,EAAE;KACP,CAAC;EACJ;;AAMF,OAAM,MAAOC,wBAAyB,SAAQN,SAAS;EACrDE,YAAAK,KAAA,EAAsE;IAAA,IAA1D;MAAEC,MAAM;MAAEC;IAAQ,CAAwC,GAAAF,KAAA;IACpE,KAAK,CACH,cAAcE,QAAQ,yCAAyCD,MAAM,MAAM,EAC3E;MAAEH,IAAI,EAAE;IAA0B,CAAE,CACrC;EACH;;AAOF,OAAM,MAAOK,+BAAgC,SAAQV,SAAS;EAC5DE,YAAAS,KAAA,EAA8D;IAAA,IAAlD;MAAEC,KAAK;MAAEC;IAAK,CAAoC,GAAAF,KAAA;IAC5D,KAAK,CACH,6BAA6BE,KAAK,wCAAwCD,KAAK,MAAM,EACrF;MAAEP,IAAI,EAAE;IAAiC,CAAE,CAC5C;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}