{"ast":null,"code":"import axios from\"axios\";const PINATA_JWT=process.env.REACT_APP_PINATA_JWT;// Function to upload the text to IPFS\nexport const uploadToIPFS=async text=>{const url=`https://api.pinata.cloud/pinning/pinJSONToIPFS`;const data={text};try{const response=await axios.post(url,data,{headers:{Authorization:`Bearer ${PINATA_JWT}`,// Ensure the JWT is passed correctly\n\"Content-Type\":\"application/json\"}});if(response.status===200){const ipfsHash=response.data.IpfsHash;console.log(\"Uploaded to IPFS: \",ipfsHash);mintOnServer(ipfsHash);return ipfsHash;// Return the content ID (CID)\n}else{console.error(\"Failed to upload to IPFS: \",response.status);return null;}}catch(error){console.error(\"Error uploading to IPFS:\",error);return null;}};const mintOnServer=async ipfsHash=>{const response=await fetch(\"http://localhost:3000/api/mint\",{method:\"POST\",// Ensure this is a POST request\nheaders:{\"Content-Type\":\"application/json\"},body:JSON.stringify({userWalletAddress:process.env.REACT_APP_USER_PUBLIC_KEY,metadataURI:ipfsHash,tokenName:\"hardcoded\",tokenLabel:\"hardcoded\"})});};","map":{"version":3,"names":["axios","PINATA_JWT","process","env","REACT_APP_PINATA_JWT","uploadToIPFS","text","url","data","response","post","headers","Authorization","status","ipfsHash","IpfsHash","console","log","mintOnServer","error","fetch","method","body","JSON","stringify","userWalletAddress","REACT_APP_USER_PUBLIC_KEY","metadataURI","tokenName","tokenLabel"],"sources":["/Users/emmanasseri/Desktop/my-own-words/client/src/components/Register/Mint.tsx"],"sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\n\nconst PINATA_JWT = process.env.REACT_APP_PINATA_JWT;\n\n// Function to upload the text to IPFS\nexport const uploadToIPFS = async (text: string): Promise<string | null> => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n\n  const data = { text };\n\n  try {\n    const response = await axios.post(url, data, {\n      headers: {\n        Authorization: `Bearer ${PINATA_JWT}`, // Ensure the JWT is passed correctly\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (response.status === 200) {\n      const ipfsHash = response.data.IpfsHash;\n      console.log(\"Uploaded to IPFS: \", ipfsHash);\n      mintOnServer(ipfsHash);\n      return ipfsHash; // Return the content ID (CID)\n    } else {\n      console.error(\"Failed to upload to IPFS: \", response.status);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error uploading to IPFS:\", error);\n    return null;\n  }\n};\n\nconst mintOnServer = async (ipfsHash: string) => {\n  const response = await fetch(\"http://localhost:3000/api/mint\", {\n    method: \"POST\", // Ensure this is a POST request\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      userWalletAddress: process.env.REACT_APP_USER_PUBLIC_KEY,\n      metadataURI: ipfsHash,\n      tokenName: \"hardcoded\",\n      tokenLabel: \"hardcoded\",\n    }),\n  });\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB,KAAM,CAAAC,UAAU,CAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAEnD;AACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,IAAY,EAA6B,CAC1E,KAAM,CAAAC,GAAG,CAAG,gDAAgD,CAE5D,KAAM,CAAAC,IAAI,CAAG,CAAEF,IAAK,CAAC,CAErB,GAAI,CACF,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAT,KAAK,CAACU,IAAI,CAACH,GAAG,CAAEC,IAAI,CAAE,CAC3CG,OAAO,CAAE,CACPC,aAAa,CAAE,UAAUX,UAAU,EAAE,CAAE;AACvC,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,GAAIQ,QAAQ,CAACI,MAAM,GAAK,GAAG,CAAE,CAC3B,KAAM,CAAAC,QAAQ,CAAGL,QAAQ,CAACD,IAAI,CAACO,QAAQ,CACvCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEH,QAAQ,CAAC,CAC3CI,YAAY,CAACJ,QAAQ,CAAC,CACtB,MAAO,CAAAA,QAAQ,CAAE;AACnB,CAAC,IAAM,CACLE,OAAO,CAACG,KAAK,CAAC,4BAA4B,CAAEV,QAAQ,CAACI,MAAM,CAAC,CAC5D,MAAO,KAAI,CACb,CACF,CAAE,MAAOM,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAD,YAAY,CAAG,KAAO,CAAAJ,QAAgB,EAAK,CAC/C,KAAM,CAAAL,QAAQ,CAAG,KAAM,CAAAW,KAAK,CAAC,gCAAgC,CAAE,CAC7DC,MAAM,CAAE,MAAM,CAAE;AAChBV,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDW,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,iBAAiB,CAAEvB,OAAO,CAACC,GAAG,CAACuB,yBAAyB,CACxDC,WAAW,CAAEb,QAAQ,CACrBc,SAAS,CAAE,WAAW,CACtBC,UAAU,CAAE,WACd,CAAC,CACH,CAAC,CAAC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}