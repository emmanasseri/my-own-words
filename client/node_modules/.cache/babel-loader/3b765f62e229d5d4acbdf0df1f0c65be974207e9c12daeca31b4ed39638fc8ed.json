{"ast":null,"code":"import axios from\"axios\";const PINATA_JWT=process.env.REACT_APP_PINATA_JWT;// Function to upload the text to IPFS\nexport const uploadToIPFS=async text=>{const url=`https://api.pinata.cloud/pinning/pinJSONToIPFS`;const data={text};try{const response=await axios.post(url,data,{headers:{Authorization:`Bearer ${PINATA_JWT}`,// Ensure the JWT is passed correctly\n\"Content-Type\":\"application/json\"}});if(response.status===200){const ipfsHash=response.data.IpfsHash;console.log(\"Uploaded to IPFS: \",ipfsHash);return ipfsHash;// Return the content ID (CID)\n}else{console.error(\"Failed to upload to IPFS: \",response.status);return null;}}catch(error){console.error(\"Error uploading to IPFS:\",error);return null;}};","map":{"version":3,"names":["axios","PINATA_JWT","process","env","REACT_APP_PINATA_JWT","uploadToIPFS","text","url","data","response","post","headers","Authorization","status","ipfsHash","IpfsHash","console","log","error"],"sources":["/Users/emmanasseri/Desktop/my-own-words/client/src/components/Register/Mint.tsx"],"sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport { useWallet } from \"../../contexts/WalletContext\";\nimport { mintNFT } from \"../../services/PolygonService\";\n\nconst PINATA_JWT = process.env.REACT_APP_PINATA_JWT;\n\n// Function to upload the text to IPFS\nexport const uploadToIPFS = async (text: string): Promise<string | null> => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n\n  const data = { text };\n\n  try {\n    const response = await axios.post(url, data, {\n      headers: {\n        Authorization: `Bearer ${PINATA_JWT}`, // Ensure the JWT is passed correctly\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (response.status === 200) {\n      const ipfsHash = response.data.IpfsHash;\n      console.log(\"Uploaded to IPFS: \", ipfsHash);\n      return ipfsHash; // Return the content ID (CID)\n    } else {\n      console.error(\"Failed to upload to IPFS: \", response.status);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error uploading to IPFS:\", error);\n    return null;\n  }\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAKzB,KAAM,CAAAC,UAAU,CAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAEnD;AACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,IAAY,EAA6B,CAC1E,KAAM,CAAAC,GAAG,CAAG,gDAAgD,CAE5D,KAAM,CAAAC,IAAI,CAAG,CAAEF,IAAK,CAAC,CAErB,GAAI,CACF,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAT,KAAK,CAACU,IAAI,CAACH,GAAG,CAAEC,IAAI,CAAE,CAC3CG,OAAO,CAAE,CACPC,aAAa,CAAE,UAAUX,UAAU,EAAE,CAAE;AACvC,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,GAAIQ,QAAQ,CAACI,MAAM,GAAK,GAAG,CAAE,CAC3B,KAAM,CAAAC,QAAQ,CAAGL,QAAQ,CAACD,IAAI,CAACO,QAAQ,CACvCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEH,QAAQ,CAAC,CAC3C,MAAO,CAAAA,QAAQ,CAAE;AACnB,CAAC,IAAM,CACLE,OAAO,CAACE,KAAK,CAAC,4BAA4B,CAAET,QAAQ,CAACI,MAAM,CAAC,CAC5D,MAAO,KAAI,CACb,CACF,CAAE,MAAOK,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,MAAO,KAAI,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}