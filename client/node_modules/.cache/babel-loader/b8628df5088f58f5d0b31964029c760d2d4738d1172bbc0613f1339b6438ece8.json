{"ast":null,"code":"import { HttpRequestError, TimeoutError } from '../../errors/request.js';\nimport { withTimeout } from '../promise/withTimeout.js';\nimport { stringify } from '../stringify.js';\nimport { idCache } from './id.js';\nexport function getHttpRpcClient(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    async request(params) {\n      const {\n        body,\n        onRequest = options.onRequest,\n        onResponse = options.onResponse,\n        timeout = options.timeout ?? 10_000\n      } = params;\n      const fetchOptions = {\n        ...(options.fetchOptions ?? {}),\n        ...(params.fetchOptions ?? {})\n      };\n      const {\n        headers,\n        method,\n        signal: signal_\n      } = fetchOptions;\n      try {\n        const response = await withTimeout(async _ref => {\n          let {\n            signal\n          } = _ref;\n          const init = {\n            ...fetchOptions,\n            body: Array.isArray(body) ? stringify(body.map(body => ({\n              jsonrpc: '2.0',\n              id: body.id ?? idCache.take(),\n              ...body\n            }))) : stringify({\n              jsonrpc: '2.0',\n              id: body.id ?? idCache.take(),\n              ...body\n            }),\n            headers: {\n              'Content-Type': 'application/json',\n              ...headers\n            },\n            method: method || 'POST',\n            signal: signal_ || (timeout > 0 ? signal : null)\n          };\n          const request = new Request(url, init);\n          const args = (await onRequest?.(request, init)) ?? {\n            ...init,\n            url\n          };\n          const response = await fetch(args.url ?? url, args);\n          return response;\n        }, {\n          errorInstance: new TimeoutError({\n            body,\n            url\n          }),\n          timeout,\n          signal: true\n        });\n        if (onResponse) await onResponse(response);\n        let data;\n        if (response.headers.get('Content-Type')?.startsWith('application/json')) data = await response.json();else {\n          data = await response.text();\n          try {\n            data = JSON.parse(data || '{}');\n          } catch (err) {\n            if (response.ok) throw err;\n            data = {\n              error: data\n            };\n          }\n        }\n        if (!response.ok) {\n          throw new HttpRequestError({\n            body,\n            details: stringify(data.error) || response.statusText,\n            headers: response.headers,\n            status: response.status,\n            url\n          });\n        }\n        return data;\n      } catch (err) {\n        if (err instanceof HttpRequestError) throw err;\n        if (err instanceof TimeoutError) throw err;\n        throw new HttpRequestError({\n          body,\n          cause: err,\n          url\n        });\n      }\n    }\n  };\n}","map":{"version":3,"names":["HttpRequestError","TimeoutError","withTimeout","stringify","idCache","getHttpRpcClient","url","options","arguments","length","undefined","request","params","body","onRequest","onResponse","timeout","fetchOptions","headers","method","signal","signal_","response","_ref","init","Array","isArray","map","jsonrpc","id","take","Request","args","fetch","errorInstance","data","get","startsWith","json","text","JSON","parse","err","ok","error","details","statusText","status","cause"],"sources":["/Users/emmanasseri/Desktop/my-own-words/client/node_modules/viem/utils/rpc/http.ts"],"sourcesContent":["import {\n  HttpRequestError,\n  type HttpRequestErrorType as HttpRequestErrorType_,\n  TimeoutError,\n  type TimeoutErrorType,\n} from '../../errors/request.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { RpcRequest, RpcResponse } from '../../types/rpc.js'\nimport type { MaybePromise } from '../../types/utils.js'\nimport {\n  type WithTimeoutErrorType,\n  withTimeout,\n} from '../promise/withTimeout.js'\nimport { stringify } from '../stringify.js'\nimport { idCache } from './id.js'\n\nexport type HttpRpcClientOptions = {\n  /** Request configuration to pass to `fetch`. */\n  fetchOptions?: Omit<RequestInit, 'body'> | undefined\n  /** A callback to handle the request. */\n  onRequest?:\n    | ((\n        request: Request,\n        init: RequestInit,\n      ) => MaybePromise<\n        void | undefined | (RequestInit & { url?: string | undefined })\n      >)\n    | undefined\n  /** A callback to handle the response. */\n  onResponse?: ((response: Response) => Promise<void> | void) | undefined\n  /** The timeout (in ms) for the request. */\n  timeout?: number | undefined\n}\n\nexport type HttpRequestParameters<\n  body extends RpcRequest | RpcRequest[] = RpcRequest,\n> = {\n  /** The RPC request body. */\n  body: body\n  /** Request configuration to pass to `fetch`. */\n  fetchOptions?: HttpRpcClientOptions['fetchOptions'] | undefined\n  /** A callback to handle the response. */\n  onRequest?:\n    | ((\n        request: Request,\n        init: RequestInit,\n      ) => MaybePromise<\n        void | undefined | (RequestInit & { url?: string | undefined })\n      >)\n    | undefined\n  /** A callback to handle the response. */\n  onResponse?: ((response: Response) => Promise<void> | void) | undefined\n  /** The timeout (in ms) for the request. */\n  timeout?: HttpRpcClientOptions['timeout'] | undefined\n}\n\nexport type HttpRequestReturnType<\n  body extends RpcRequest | RpcRequest[] = RpcRequest,\n> = body extends RpcRequest[] ? RpcResponse[] : RpcResponse\n\nexport type HttpRequestErrorType =\n  | HttpRequestErrorType_\n  | TimeoutErrorType\n  | WithTimeoutErrorType\n  | ErrorType\n\nexport type HttpRpcClient = {\n  request<body extends RpcRequest | RpcRequest[]>(\n    params: HttpRequestParameters<body>,\n  ): Promise<HttpRequestReturnType<body>>\n}\n\nexport function getHttpRpcClient(\n  url: string,\n  options: HttpRpcClientOptions = {},\n): HttpRpcClient {\n  return {\n    async request(params) {\n      const {\n        body,\n        onRequest = options.onRequest,\n        onResponse = options.onResponse,\n        timeout = options.timeout ?? 10_000,\n      } = params\n\n      const fetchOptions = {\n        ...(options.fetchOptions ?? {}),\n        ...(params.fetchOptions ?? {}),\n      }\n\n      const { headers, method, signal: signal_ } = fetchOptions\n\n      try {\n        const response = await withTimeout(\n          async ({ signal }) => {\n            const init: RequestInit = {\n              ...fetchOptions,\n              body: Array.isArray(body)\n                ? stringify(\n                    body.map((body) => ({\n                      jsonrpc: '2.0',\n                      id: body.id ?? idCache.take(),\n                      ...body,\n                    })),\n                  )\n                : stringify({\n                    jsonrpc: '2.0',\n                    id: body.id ?? idCache.take(),\n                    ...body,\n                  }),\n              headers: {\n                'Content-Type': 'application/json',\n                ...headers,\n              },\n              method: method || 'POST',\n              signal: signal_ || (timeout > 0 ? signal : null),\n            }\n            const request = new Request(url, init)\n            const args = (await onRequest?.(request, init)) ?? { ...init, url }\n            const response = await fetch(args.url ?? url, args)\n            return response\n          },\n          {\n            errorInstance: new TimeoutError({ body, url }),\n            timeout,\n            signal: true,\n          },\n        )\n\n        if (onResponse) await onResponse(response)\n\n        let data: any\n        if (\n          response.headers.get('Content-Type')?.startsWith('application/json')\n        )\n          data = await response.json()\n        else {\n          data = await response.text()\n          try {\n            data = JSON.parse(data || '{}')\n          } catch (err) {\n            if (response.ok) throw err\n            data = { error: data }\n          }\n        }\n\n        if (!response.ok) {\n          throw new HttpRequestError({\n            body,\n            details: stringify(data.error) || response.statusText,\n            headers: response.headers,\n            status: response.status,\n            url,\n          })\n        }\n\n        return data\n      } catch (err) {\n        if (err instanceof HttpRequestError) throw err\n        if (err instanceof TimeoutError) throw err\n        throw new HttpRequestError({\n          body,\n          cause: err as Error,\n          url,\n        })\n      }\n    },\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}