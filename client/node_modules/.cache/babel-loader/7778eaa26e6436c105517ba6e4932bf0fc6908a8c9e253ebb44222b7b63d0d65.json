{"ast":null,"code":"import { TransactionRejectedRpcError, UserRejectedRequestError } from '../../errors/rpc.js';\nimport { wait } from '../../utils/wait.js';\nimport { createTransport } from './createTransport.js';\nexport function fallback(transports_) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    key = 'fallback',\n    name = 'Fallback',\n    rank = false,\n    retryCount,\n    retryDelay\n  } = config;\n  return _ref => {\n    let {\n      chain,\n      pollingInterval = 4_000,\n      timeout,\n      ...rest\n    } = _ref;\n    let transports = transports_;\n    let onResponse = () => {};\n    const transport = createTransport({\n      key,\n      name,\n      async request(_ref2) {\n        let {\n          method,\n          params\n        } = _ref2;\n        const fetch = async function () {\n          let i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          const transport = transports[i]({\n            ...rest,\n            chain,\n            retryCount: 0,\n            timeout\n          });\n          try {\n            const response = await transport.request({\n              method,\n              params\n            });\n            onResponse({\n              method,\n              params: params,\n              response,\n              transport,\n              status: 'success'\n            });\n            return response;\n          } catch (err) {\n            onResponse({\n              error: err,\n              method,\n              params: params,\n              transport,\n              status: 'error'\n            });\n            if (shouldThrow(err)) throw err;\n            // If we've reached the end of the fallbacks, throw the error.\n            if (i === transports.length - 1) throw err;\n            // Otherwise, try the next fallback.\n            return fetch(i + 1);\n          }\n        };\n        return fetch();\n      },\n      retryCount,\n      retryDelay,\n      type: 'fallback'\n    }, {\n      onResponse: fn => onResponse = fn,\n      transports: transports.map(fn => fn({\n        chain,\n        retryCount: 0\n      }))\n    });\n    if (rank) {\n      const rankOptions = typeof rank === 'object' ? rank : {};\n      rankTransports({\n        chain,\n        interval: rankOptions.interval ?? pollingInterval,\n        onTransports: transports_ => transports = transports_,\n        sampleCount: rankOptions.sampleCount,\n        timeout: rankOptions.timeout,\n        transports,\n        weights: rankOptions.weights\n      });\n    }\n    return transport;\n  };\n}\nfunction shouldThrow(error) {\n  if ('code' in error && typeof error.code === 'number') {\n    if (error.code === TransactionRejectedRpcError.code || error.code === UserRejectedRequestError.code || error.code === 5000 // CAIP UserRejectedRequestError\n    ) return true;\n  }\n  return false;\n}\n/** @internal */\nexport function rankTransports(_ref3) {\n  let {\n    chain,\n    interval = 4_000,\n    onTransports,\n    sampleCount = 10,\n    timeout = 1_000,\n    transports,\n    weights = {}\n  } = _ref3;\n  const {\n    stability: stabilityWeight = 0.7,\n    latency: latencyWeight = 0.3\n  } = weights;\n  const samples = [];\n  const rankTransports_ = async () => {\n    // 1. Take a sample from each Transport.\n    const sample = await Promise.all(transports.map(async transport => {\n      const transport_ = transport({\n        chain,\n        retryCount: 0,\n        timeout\n      });\n      const start = Date.now();\n      let end;\n      let success;\n      try {\n        await transport_.request({\n          method: 'net_listening'\n        });\n        success = 1;\n      } catch {\n        success = 0;\n      } finally {\n        end = Date.now();\n      }\n      const latency = end - start;\n      return {\n        latency,\n        success\n      };\n    }));\n    // 2. Store the sample. If we have more than `sampleCount` samples, remove\n    // the oldest sample.\n    samples.push(sample);\n    if (samples.length > sampleCount) samples.shift();\n    // 3. Calculate the max latency from samples.\n    const maxLatency = Math.max(...samples.map(sample => Math.max(...sample.map(_ref4 => {\n      let {\n        latency\n      } = _ref4;\n      return latency;\n    }))));\n    // 4. Calculate the score for each Transport.\n    const scores = transports.map((_, i) => {\n      const latencies = samples.map(sample => sample[i].latency);\n      const meanLatency = latencies.reduce((acc, latency) => acc + latency, 0) / latencies.length;\n      const latencyScore = 1 - meanLatency / maxLatency;\n      const successes = samples.map(sample => sample[i].success);\n      const stabilityScore = successes.reduce((acc, success) => acc + success, 0) / successes.length;\n      if (stabilityScore === 0) return [0, i];\n      return [latencyWeight * latencyScore + stabilityWeight * stabilityScore, i];\n    }).sort((a, b) => b[0] - a[0]);\n    // 5. Sort the Transports by score.\n    onTransports(scores.map(_ref5 => {\n      let [, i] = _ref5;\n      return transports[i];\n    }));\n    // 6. Wait, and then rank again.\n    await wait(interval);\n    rankTransports_();\n  };\n  rankTransports_();\n}","map":{"version":3,"names":["TransactionRejectedRpcError","UserRejectedRequestError","wait","createTransport","fallback","transports_","config","arguments","length","undefined","key","name","rank","retryCount","retryDelay","_ref","chain","pollingInterval","timeout","rest","transports","onResponse","transport","request","_ref2","method","params","fetch","i","response","status","err","error","shouldThrow","type","fn","map","rankOptions","rankTransports","interval","onTransports","sampleCount","weights","code","_ref3","stability","stabilityWeight","latency","latencyWeight","samples","rankTransports_","sample","Promise","all","transport_","start","Date","now","end","success","push","shift","maxLatency","Math","max","_ref4","scores","_","latencies","meanLatency","reduce","acc","latencyScore","successes","stabilityScore","sort","a","b","_ref5"],"sources":["/Users/emmanasseri/Desktop/my-own-words/node_modules/viem/clients/transports/fallback.ts"],"sourcesContent":["import {\n  TransactionRejectedRpcError,\n  UserRejectedRequestError,\n} from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport { wait } from '../../utils/wait.js'\n\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n// TODO: Narrow `method` & `params` types.\nexport type OnResponseFn = (\n  args: {\n    method: string\n    params: unknown[]\n    transport: ReturnType<Transport>\n  } & (\n    | {\n        error?: undefined\n        response: unknown\n        status: 'success'\n      }\n    | {\n        error: Error\n        response?: undefined\n        status: 'error'\n      }\n  ),\n) => void\n\ntype RankOptions = {\n  /**\n   * The polling interval (in ms) at which the ranker should ping the RPC URL.\n   * @default client.pollingInterval\n   */\n  interval?: number | undefined\n  /**\n   * The number of previous samples to perform ranking on.\n   * @default 10\n   */\n  sampleCount?: number | undefined\n  /**\n   * Timeout when sampling transports.\n   * @default 1_000\n   */\n  timeout?: number | undefined\n  /**\n   * Weights to apply to the scores. Weight values are proportional.\n   */\n  weights?:\n    | {\n        /**\n         * The weight to apply to the latency score.\n         * @default 0.3\n         */\n        latency?: number | undefined\n        /**\n         * The weight to apply to the stability score.\n         * @default 0.7\n         */\n        stability?: number | undefined\n      }\n    | undefined\n}\n\nexport type FallbackTransportConfig = {\n  /** The key of the Fallback transport. */\n  key?: TransportConfig['key'] | undefined\n  /** The name of the Fallback transport. */\n  name?: TransportConfig['name'] | undefined\n  /** Toggle to enable ranking, or rank options. */\n  rank?: boolean | RankOptions | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n}\n\nexport type FallbackTransport<\n  transports extends readonly Transport[] = readonly Transport[],\n> = Transport<\n  'fallback',\n  {\n    onResponse: (fn: OnResponseFn) => void\n    transports: {\n      [key in keyof transports]: ReturnType<transports[key]>\n    }\n  }\n>\n\nexport type FallbackTransportErrorType = CreateTransportErrorType | ErrorType\n\nexport function fallback<const transports extends readonly Transport[]>(\n  transports_: transports,\n  config: FallbackTransportConfig = {},\n): FallbackTransport<transports> {\n  const {\n    key = 'fallback',\n    name = 'Fallback',\n    rank = false,\n    retryCount,\n    retryDelay,\n  } = config\n  return (({ chain, pollingInterval = 4_000, timeout, ...rest }) => {\n    let transports = transports_\n\n    let onResponse: OnResponseFn = () => {}\n\n    const transport = createTransport(\n      {\n        key,\n        name,\n        async request({ method, params }) {\n          const fetch = async (i = 0): Promise<any> => {\n            const transport = transports[i]({\n              ...rest,\n              chain,\n              retryCount: 0,\n              timeout,\n            })\n            try {\n              const response = await transport.request({\n                method,\n                params,\n              } as any)\n\n              onResponse({\n                method,\n                params: params as unknown[],\n                response,\n                transport,\n                status: 'success',\n              })\n\n              return response\n            } catch (err) {\n              onResponse({\n                error: err as Error,\n                method,\n                params: params as unknown[],\n                transport,\n                status: 'error',\n              })\n\n              if (shouldThrow(err as Error)) throw err\n\n              // If we've reached the end of the fallbacks, throw the error.\n              if (i === transports.length - 1) throw err\n\n              // Otherwise, try the next fallback.\n              return fetch(i + 1)\n            }\n          }\n          return fetch()\n        },\n        retryCount,\n        retryDelay,\n        type: 'fallback',\n      },\n      {\n        onResponse: (fn: OnResponseFn) => (onResponse = fn),\n        transports: transports.map((fn) => fn({ chain, retryCount: 0 })),\n      },\n    )\n\n    if (rank) {\n      const rankOptions = (typeof rank === 'object' ? rank : {}) as RankOptions\n      rankTransports({\n        chain,\n        interval: rankOptions.interval ?? pollingInterval,\n        onTransports: (transports_) => (transports = transports_ as transports),\n        sampleCount: rankOptions.sampleCount,\n        timeout: rankOptions.timeout,\n        transports,\n        weights: rankOptions.weights,\n      })\n    }\n    return transport\n  }) as FallbackTransport<transports>\n}\n\nfunction shouldThrow(error: Error) {\n  if ('code' in error && typeof error.code === 'number') {\n    if (\n      error.code === TransactionRejectedRpcError.code ||\n      error.code === UserRejectedRequestError.code ||\n      error.code === 5000 // CAIP UserRejectedRequestError\n    )\n      return true\n  }\n  return false\n}\n\n/** @internal */\nexport function rankTransports({\n  chain,\n  interval = 4_000,\n  onTransports,\n  sampleCount = 10,\n  timeout = 1_000,\n  transports,\n  weights = {},\n}: {\n  chain?: Chain | undefined\n  interval: RankOptions['interval']\n  onTransports: (transports: readonly Transport[]) => void\n  sampleCount?: RankOptions['sampleCount'] | undefined\n  timeout?: RankOptions['timeout'] | undefined\n  transports: readonly Transport[]\n  weights?: RankOptions['weights'] | undefined\n}) {\n  const { stability: stabilityWeight = 0.7, latency: latencyWeight = 0.3 } =\n    weights\n\n  type SampleData = { latency: number; success: number }\n  type Sample = SampleData[]\n  const samples: Sample[] = []\n\n  const rankTransports_ = async () => {\n    // 1. Take a sample from each Transport.\n    const sample: Sample = await Promise.all(\n      transports.map(async (transport) => {\n        const transport_ = transport({ chain, retryCount: 0, timeout })\n\n        const start = Date.now()\n        let end: number\n        let success: number\n        try {\n          await transport_.request({ method: 'net_listening' })\n          success = 1\n        } catch {\n          success = 0\n        } finally {\n          end = Date.now()\n        }\n        const latency = end - start\n        return { latency, success }\n      }),\n    )\n\n    // 2. Store the sample. If we have more than `sampleCount` samples, remove\n    // the oldest sample.\n    samples.push(sample)\n    if (samples.length > sampleCount) samples.shift()\n\n    // 3. Calculate the max latency from samples.\n    const maxLatency = Math.max(\n      ...samples.map((sample) =>\n        Math.max(...sample.map(({ latency }) => latency)),\n      ),\n    )\n\n    // 4. Calculate the score for each Transport.\n    const scores = transports\n      .map((_, i) => {\n        const latencies = samples.map((sample) => sample[i].latency)\n        const meanLatency =\n          latencies.reduce((acc, latency) => acc + latency, 0) /\n          latencies.length\n        const latencyScore = 1 - meanLatency / maxLatency\n\n        const successes = samples.map((sample) => sample[i].success)\n        const stabilityScore =\n          successes.reduce((acc, success) => acc + success, 0) /\n          successes.length\n\n        if (stabilityScore === 0) return [0, i]\n        return [\n          latencyWeight * latencyScore + stabilityWeight * stabilityScore,\n          i,\n        ]\n      })\n      .sort((a, b) => b[0] - a[0])\n\n    // 5. Sort the Transports by score.\n    onTransports(scores.map(([, i]) => transports[i]))\n\n    // 6. Wait, and then rank again.\n    await wait(interval)\n    rankTransports_()\n  }\n  rankTransports_()\n}\n"],"mappings":"AAAA,SACEA,2BAA2B,EAC3BC,wBAAwB,QACnB,qBAAqB;AAG5B,SAASC,IAAI,QAAQ,qBAAqB;AAE1C,SAIEC,eAAe,QACV,sBAAsB;AAmF7B,OAAM,SAAUC,QAAQA,CACtBC,WAAuB,EACa;EAAA,IAApCC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkC,EAAE;EAEpC,MAAM;IACJG,GAAG,GAAG,UAAU;IAChBC,IAAI,GAAG,UAAU;IACjBC,IAAI,GAAG,KAAK;IACZC,UAAU;IACVC;EAAU,CACX,GAAGR,MAAM;EACV,OAAQS,IAAA,IAAyD;IAAA,IAAxD;MAAEC,KAAK;MAAEC,eAAe,GAAG,KAAK;MAAEC,OAAO;MAAE,GAAGC;IAAI,CAAE,GAAAJ,IAAA;IAC3D,IAAIK,UAAU,GAAGf,WAAW;IAE5B,IAAIgB,UAAU,GAAiBA,CAAA,KAAK,CAAE,CAAC;IAEvC,MAAMC,SAAS,GAAGnB,eAAe,CAC/B;MACEO,GAAG;MACHC,IAAI;MACJ,MAAMY,OAAOA,CAAAC,KAAA,EAAmB;QAAA,IAAlB;UAAEC,MAAM;UAAEC;QAAM,CAAE,GAAAF,KAAA;QAC9B,MAAMG,KAAK,GAAG,eAAAA,CAAA,EAA8B;UAAA,IAAvBC,CAAC,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;UACxB,MAAMe,SAAS,GAAGF,UAAU,CAACQ,CAAC,CAAC,CAAC;YAC9B,GAAGT,IAAI;YACPH,KAAK;YACLH,UAAU,EAAE,CAAC;YACbK;WACD,CAAC;UACF,IAAI;YACF,MAAMW,QAAQ,GAAG,MAAMP,SAAS,CAACC,OAAO,CAAC;cACvCE,MAAM;cACNC;aACM,CAAC;YAETL,UAAU,CAAC;cACTI,MAAM;cACNC,MAAM,EAAEA,MAAmB;cAC3BG,QAAQ;cACRP,SAAS;cACTQ,MAAM,EAAE;aACT,CAAC;YAEF,OAAOD,QAAQ;UACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;YACZV,UAAU,CAAC;cACTW,KAAK,EAAED,GAAY;cACnBN,MAAM;cACNC,MAAM,EAAEA,MAAmB;cAC3BJ,SAAS;cACTQ,MAAM,EAAE;aACT,CAAC;YAEF,IAAIG,WAAW,CAACF,GAAY,CAAC,EAAE,MAAMA,GAAG;YAExC;YACA,IAAIH,CAAC,KAAKR,UAAU,CAACZ,MAAM,GAAG,CAAC,EAAE,MAAMuB,GAAG;YAE1C;YACA,OAAOJ,KAAK,CAACC,CAAC,GAAG,CAAC,CAAC;UACrB;QACF,CAAC;QACD,OAAOD,KAAK,EAAE;MAChB,CAAC;MACDd,UAAU;MACVC,UAAU;MACVoB,IAAI,EAAE;KACP,EACD;MACEb,UAAU,EAAGc,EAAgB,IAAMd,UAAU,GAAGc,EAAG;MACnDf,UAAU,EAAEA,UAAU,CAACgB,GAAG,CAAED,EAAE,IAAKA,EAAE,CAAC;QAAEnB,KAAK;QAAEH,UAAU,EAAE;MAAC,CAAE,CAAC;KAChE,CACF;IAED,IAAID,IAAI,EAAE;MACR,MAAMyB,WAAW,GAAI,OAAOzB,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAG,EAAkB;MACzE0B,cAAc,CAAC;QACbtB,KAAK;QACLuB,QAAQ,EAAEF,WAAW,CAACE,QAAQ,IAAItB,eAAe;QACjDuB,YAAY,EAAGnC,WAAW,IAAMe,UAAU,GAAGf,WAA0B;QACvEoC,WAAW,EAAEJ,WAAW,CAACI,WAAW;QACpCvB,OAAO,EAAEmB,WAAW,CAACnB,OAAO;QAC5BE,UAAU;QACVsB,OAAO,EAAEL,WAAW,CAACK;OACtB,CAAC;IACJ;IACA,OAAOpB,SAAS;EAClB,CAAC;AACH;AAEA,SAASW,WAAWA,CAACD,KAAY;EAC/B,IAAI,MAAM,IAAIA,KAAK,IAAI,OAAOA,KAAK,CAACW,IAAI,KAAK,QAAQ,EAAE;IACrD,IACEX,KAAK,CAACW,IAAI,KAAK3C,2BAA2B,CAAC2C,IAAI,IAC/CX,KAAK,CAACW,IAAI,KAAK1C,wBAAwB,CAAC0C,IAAI,IAC5CX,KAAK,CAACW,IAAI,KAAK,IAAI,CAAC;IAAA,EAEpB,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AACd;AAEA;AACA,OAAM,SAAUL,cAAcA,CAAAM,KAAA,EAgB7B;EAAA,IAhB8B;IAC7B5B,KAAK;IACLuB,QAAQ,GAAG,KAAK;IAChBC,YAAY;IACZC,WAAW,GAAG,EAAE;IAChBvB,OAAO,GAAG,KAAK;IACfE,UAAU;IACVsB,OAAO,GAAG;EAAE,CASb,GAAAE,KAAA;EACC,MAAM;IAAEC,SAAS,EAAEC,eAAe,GAAG,GAAG;IAAEC,OAAO,EAAEC,aAAa,GAAG;EAAG,CAAE,GACtEN,OAAO;EAIT,MAAMO,OAAO,GAAa,EAAE;EAE5B,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAW;IACjC;IACA,MAAMC,MAAM,GAAW,MAAMC,OAAO,CAACC,GAAG,CACtCjC,UAAU,CAACgB,GAAG,CAAC,MAAOd,SAAS,IAAI;MACjC,MAAMgC,UAAU,GAAGhC,SAAS,CAAC;QAAEN,KAAK;QAAEH,UAAU,EAAE,CAAC;QAAEK;MAAO,CAAE,CAAC;MAE/D,MAAMqC,KAAK,GAAGC,IAAI,CAACC,GAAG,EAAE;MACxB,IAAIC,GAAW;MACf,IAAIC,OAAe;MACnB,IAAI;QACF,MAAML,UAAU,CAAC/B,OAAO,CAAC;UAAEE,MAAM,EAAE;QAAe,CAAE,CAAC;QACrDkC,OAAO,GAAG,CAAC;MACb,CAAC,CAAC,MAAM;QACNA,OAAO,GAAG,CAAC;MACb,CAAC,SAAS;QACRD,GAAG,GAAGF,IAAI,CAACC,GAAG,EAAE;MAClB;MACA,MAAMV,OAAO,GAAGW,GAAG,GAAGH,KAAK;MAC3B,OAAO;QAAER,OAAO;QAAEY;MAAO,CAAE;IAC7B,CAAC,CAAC,CACH;IAED;IACA;IACAV,OAAO,CAACW,IAAI,CAACT,MAAM,CAAC;IACpB,IAAIF,OAAO,CAACzC,MAAM,GAAGiC,WAAW,EAAEQ,OAAO,CAACY,KAAK,EAAE;IAEjD;IACA,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CACzB,GAAGf,OAAO,CAACb,GAAG,CAAEe,MAAM,IACpBY,IAAI,CAACC,GAAG,CAAC,GAAGb,MAAM,CAACf,GAAG,CAAC6B,KAAA;MAAA,IAAC;QAAElB;MAAO,CAAE,GAAAkB,KAAA;MAAA,OAAKlB,OAAO;IAAA,EAAC,CAAC,CAClD,CACF;IAED;IACA,MAAMmB,MAAM,GAAG9C,UAAU,CACtBgB,GAAG,CAAC,CAAC+B,CAAC,EAAEvC,CAAC,KAAI;MACZ,MAAMwC,SAAS,GAAGnB,OAAO,CAACb,GAAG,CAAEe,MAAM,IAAKA,MAAM,CAACvB,CAAC,CAAC,CAACmB,OAAO,CAAC;MAC5D,MAAMsB,WAAW,GACfD,SAAS,CAACE,MAAM,CAAC,CAACC,GAAG,EAAExB,OAAO,KAAKwB,GAAG,GAAGxB,OAAO,EAAE,CAAC,CAAC,GACpDqB,SAAS,CAAC5D,MAAM;MAClB,MAAMgE,YAAY,GAAG,CAAC,GAAGH,WAAW,GAAGP,UAAU;MAEjD,MAAMW,SAAS,GAAGxB,OAAO,CAACb,GAAG,CAAEe,MAAM,IAAKA,MAAM,CAACvB,CAAC,CAAC,CAAC+B,OAAO,CAAC;MAC5D,MAAMe,cAAc,GAClBD,SAAS,CAACH,MAAM,CAAC,CAACC,GAAG,EAAEZ,OAAO,KAAKY,GAAG,GAAGZ,OAAO,EAAE,CAAC,CAAC,GACpDc,SAAS,CAACjE,MAAM;MAElB,IAAIkE,cAAc,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE9C,CAAC,CAAC;MACvC,OAAO,CACLoB,aAAa,GAAGwB,YAAY,GAAG1B,eAAe,GAAG4B,cAAc,EAC/D9C,CAAC,CACF;IACH,CAAC,CAAC,CACD+C,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9B;IACApC,YAAY,CAAC0B,MAAM,CAAC9B,GAAG,CAAC0C,KAAA;MAAA,IAAC,GAAGlD,CAAC,CAAC,GAAAkD,KAAA;MAAA,OAAK1D,UAAU,CAACQ,CAAC,CAAC;IAAA,EAAC,CAAC;IAElD;IACA,MAAM1B,IAAI,CAACqC,QAAQ,CAAC;IACpBW,eAAe,EAAE;EACnB,CAAC;EACDA,eAAe,EAAE;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}