{"ast":null,"code":"import React,{createContext,useContext,useState}from\"react\";import createMetaMaskProvider from'metamask-extension-provider';// Declare the 'ethereum' property globally\nimport{jsx as _jsx}from\"react/jsx-runtime\";const Web3Context=/*#__PURE__*/createContext(null);export const Web3Provider=_ref=>{let{children}=_ref;const[walletAddress,setWalletAddress]=useState(\"\");const[networkId,setNetworkId]=useState(0);// Function to connect MetaMask wallet\nconst connectWallet=async()=>{console.log(\"Connecting wallet...\");const provider=createMetaMaskProvider();console.log(\"Provider created:\",provider);if(!provider){console.error(\"MetaMask provider not detected.\");throw new Error(\"MetaMask provider not detected.\");}await Promise.all([provider.request({method:'eth_requestAccounts'}),provider.request({method:'eth_chainId'})]);const chainId=provider.chainId;const account=provider.selectedAddress;console.log(\"Connected to wallet:\",account);console.log(\"Connected to network:\",chainId);};return/*#__PURE__*/_jsx(Web3Context.Provider,{value:{walletAddress,networkId,connectWallet},children:children});};export const useWeb3=()=>useContext(Web3Context);","map":{"version":3,"names":["React","createContext","useContext","useState","createMetaMaskProvider","jsx","_jsx","Web3Context","Web3Provider","_ref","children","walletAddress","setWalletAddress","networkId","setNetworkId","connectWallet","console","log","provider","error","Error","Promise","all","request","method","chainId","account","selectedAddress","Provider","value","useWeb3"],"sources":["/Users/emmanasseri/Desktop/my-own-words/client/src/contexts/Web3Context.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\nimport createMetaMaskProvider from 'metamask-extension-provider';\n\n// Declare the 'ethereum' property globally\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\ninterface Web3ContextType {\n  walletAddress: string;\n  networkId: number;\n  connectWallet: () => Promise<void>;\n}\n\nconst Web3Context = createContext<Web3ContextType | null>(null);\n\nexport const Web3Provider = ({ children }: { children: ReactNode }) => {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [networkId, setNetworkId] = useState(0);\n\n  // Function to connect MetaMask wallet\n  const connectWallet = async () => {\n    console.log(\"Connecting wallet...\");\n    const provider = createMetaMaskProvider();\n    console.log(\"Provider created:\", provider);\n\n    if (!provider) {\n        console.error(\"MetaMask provider not detected.\");\n        throw new Error(\"MetaMask provider not detected.\");\n    }\n\n    await Promise.all([\n        provider.request({\n            method: 'eth_requestAccounts',\n        }),\n        provider.request({ method: 'eth_chainId' }),\n    ]);\n\n    const chainId = provider.chainId;\n    const account = provider.selectedAddress;\n    console.log(\"Connected to wallet:\", account);\n    console.log(\"Connected to network:\", chainId);\n    }\n  \n\n  return (\n    <Web3Context.Provider value={{ walletAddress, networkId, connectWallet }}>\n      {children}\n    </Web3Context.Provider>\n  );\n};\n\nexport const useWeb3 = () => useContext(Web3Context);\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAA8B,OAAO,CACxF,MAAO,CAAAC,sBAAsB,KAAM,6BAA6B,CAEhE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAaA,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAyB,IAAI,CAAC,CAE/D,MAAO,MAAM,CAAAO,YAAY,CAAGC,IAAA,EAA2C,IAA1C,CAAEC,QAAkC,CAAC,CAAAD,IAAA,CAChE,KAAM,CAACE,aAAa,CAAEC,gBAAgB,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACU,SAAS,CAAEC,YAAY,CAAC,CAAGX,QAAQ,CAAC,CAAC,CAAC,CAE7C;AACA,KAAM,CAAAY,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACnC,KAAM,CAAAC,QAAQ,CAAGd,sBAAsB,CAAC,CAAC,CACzCY,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEC,QAAQ,CAAC,CAE1C,GAAI,CAACA,QAAQ,CAAE,CACXF,OAAO,CAACG,KAAK,CAAC,iCAAiC,CAAC,CAChD,KAAM,IAAI,CAAAC,KAAK,CAAC,iCAAiC,CAAC,CACtD,CAEA,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CACdJ,QAAQ,CAACK,OAAO,CAAC,CACbC,MAAM,CAAE,qBACZ,CAAC,CAAC,CACFN,QAAQ,CAACK,OAAO,CAAC,CAAEC,MAAM,CAAE,aAAc,CAAC,CAAC,CAC9C,CAAC,CAEF,KAAM,CAAAC,OAAO,CAAGP,QAAQ,CAACO,OAAO,CAChC,KAAM,CAAAC,OAAO,CAAGR,QAAQ,CAACS,eAAe,CACxCX,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAES,OAAO,CAAC,CAC5CV,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEQ,OAAO,CAAC,CAC7C,CAAC,CAGH,mBACEnB,IAAA,CAACC,WAAW,CAACqB,QAAQ,EAACC,KAAK,CAAE,CAAElB,aAAa,CAAEE,SAAS,CAAEE,aAAc,CAAE,CAAAL,QAAA,CACtEA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAoB,OAAO,CAAGA,CAAA,GAAM5B,UAAU,CAACK,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}