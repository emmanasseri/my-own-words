{"ast":null,"code":"import { ChainMismatchError, ChainNotFoundError } from '../../errors/chain.js';\nexport function assertCurrentChain(_ref) {\n  let {\n    chain,\n    currentChainId\n  } = _ref;\n  if (!chain) throw new ChainNotFoundError();\n  if (currentChainId !== chain.id) throw new ChainMismatchError({\n    chain,\n    currentChainId\n  });\n}","map":{"version":3,"names":["ChainMismatchError","ChainNotFoundError","assertCurrentChain","_ref","chain","currentChainId","id"],"sources":["/Users/emmanasseri/Desktop/my-own-words/node_modules/viem/utils/chain/assertCurrentChain.ts"],"sourcesContent":["import {\n  ChainMismatchError,\n  type ChainMismatchErrorType,\n  ChainNotFoundError,\n  type ChainNotFoundErrorType,\n} from '../../errors/chain.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\n\nexport type AssertCurrentChainParameters = {\n  chain?: Chain | undefined\n  currentChainId: number\n}\n\nexport type AssertCurrentChainErrorType =\n  | ChainNotFoundErrorType\n  | ChainMismatchErrorType\n  | ErrorType\n\nexport function assertCurrentChain({\n  chain,\n  currentChainId,\n}: AssertCurrentChainParameters): void {\n  if (!chain) throw new ChainNotFoundError()\n  if (currentChainId !== chain.id)\n    throw new ChainMismatchError({ chain, currentChainId })\n}\n"],"mappings":"AAAA,SACEA,kBAAkB,EAElBC,kBAAkB,QAEb,uBAAuB;AAc9B,OAAM,SAAUC,kBAAkBA,CAAAC,IAAA,EAGH;EAAA,IAHI;IACjCC,KAAK;IACLC;EAAc,CACe,GAAAF,IAAA;EAC7B,IAAI,CAACC,KAAK,EAAE,MAAM,IAAIH,kBAAkB,EAAE;EAC1C,IAAII,cAAc,KAAKD,KAAK,CAACE,EAAE,EAC7B,MAAM,IAAIN,kBAAkB,CAAC;IAAEI,KAAK;IAAEC;EAAc,CAAE,CAAC;AAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}