{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Box,Text,Image,Button}from\"@chakra-ui/react\";import{useNavigate}from\"react-router-dom\";import{useLoading}from\"../contexts/LoadingContext\";// Import the loading hook\nimport{uploadToIPFS}from\"../components/Register/Mint\";//import { useWallet } from \"../contexts/WalletContext\"; // Use wallet context for minting\nimport theme from\"../theme\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Register=()=>{const[selectedText,setSelectedText]=useState(\"\");// State to track selected text\nconst[buttonEnabled,setButtonEnabled]=useState(false);// State to track button enable/disable\nconst{setIsLoading}=useLoading();// Hook to trigger loading\n// const { mintNFT } = useWallet(); // Get the mintNFT function from WalletContext\nconst navigate=useNavigate();// Hook for navigation\n// Function to handle text selection in the browser\nconst handleTextSelection=()=>{var _window$getSelection;const selectedText=((_window$getSelection=window.getSelection())===null||_window$getSelection===void 0?void 0:_window$getSelection.toString())||\"\";setSelectedText(selectedText);setButtonEnabled(selectedText.length>0);// Enable button if text is selected\n};// Listen for text selection in the window\nuseEffect(()=>{document.addEventListener(\"mouseup\",handleTextSelection);// Cleanup event listener when component unmounts\nreturn()=>{document.removeEventListener(\"mouseup\",handleTextSelection);};},[]);const handleMint=async()=>{if(selectedText){setIsLoading(true);// Start loading\ntry{// Step 1: Upload the selected text to IPFS\nconst contentID=await uploadToIPFS(selectedText);if(contentID){console.log(\"IPFS content ID:\",contentID);// Step 2: Send a request to your server's minting endpoint\nconst response=await fetch(\"http://localhost:3000/routes/mint\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({userWalletAddress:process.env.REACT_APP_USER_PUBLIC_KEY,// Replace with recipient wallet address\nmetadataURI:contentID,// Use the contentID from IPFS\ntokenName:\"YourTokenName\",// Hardcode or dynamically generate\ntokenLabel:\"YourTokenLabel\"// Hardcode or dynamically generate\n})});const result=await response.json();if(result.success){console.log(`NFT minted successfully with transaction hash: ${result.transactionHash}`);}else{console.error(\"Minting failed:\",result.error);}}}catch(error){console.error(\"Error minting NFT or uploading to IPFS:\",error);}finally{setIsLoading(false);// Stop loading\nnavigate(\"/home\");// Navigate to home page\n}}};return/*#__PURE__*/_jsxs(Box,{p:6,width:theme.views.expandedView.width,height:theme.views.expandedView.height,mx:\"auto\",display:\"flex\",flexDirection:\"column\",alignItems:\"center\",gap:6,children:[/*#__PURE__*/_jsx(Text,{fontSize:\"2xl\",fontWeight:\"bold\",children:\"Highlight text to register it as IP\"}),/*#__PURE__*/_jsx(Image,{src:\"/images/register-ip.png\"// Replace with the actual image path\n,alt:\"Register IP\",maxW:\"100%\",mb:4}),/*#__PURE__*/_jsx(Text,{fontSize:\"md\",textAlign:\"left\",width:\"100%\",children:\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.\"}),/*#__PURE__*/_jsx(Button,{bg:buttonEnabled?\"blue.500\":\"gray.400\",color:\"white\",_hover:buttonEnabled?{bg:\"blue.600\"}:{},disabled:!buttonEnabled// Disable button if no text is selected\n,width:\"100%\",onClick:handleMint,children:\"Mint Selected Text\"})]});};export default Register;","map":{"version":3,"names":["React","useState","useEffect","Box","Text","Image","Button","useNavigate","useLoading","uploadToIPFS","theme","jsx","_jsx","jsxs","_jsxs","Register","selectedText","setSelectedText","buttonEnabled","setButtonEnabled","setIsLoading","navigate","handleTextSelection","_window$getSelection","window","getSelection","toString","length","document","addEventListener","removeEventListener","handleMint","contentID","console","log","response","fetch","method","headers","body","JSON","stringify","userWalletAddress","process","env","REACT_APP_USER_PUBLIC_KEY","metadataURI","tokenName","tokenLabel","result","json","success","transactionHash","error","p","width","views","expandedView","height","mx","display","flexDirection","alignItems","gap","children","fontSize","fontWeight","src","alt","maxW","mb","textAlign","bg","color","_hover","disabled","onClick"],"sources":["/Users/emmanasseri/Desktop/my-own-words/client/src/pages/Register.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Box, Text, Image, Button } from \"@chakra-ui/react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useLoading } from \"../contexts/LoadingContext\"; // Import the loading hook\nimport { uploadToIPFS } from \"../components/Register/Mint\";\n//import { useWallet } from \"../contexts/WalletContext\"; // Use wallet context for minting\nimport theme from \"../theme\";\n\nconst Register: React.FC = () => {\n  const [selectedText, setSelectedText] = useState(\"\"); // State to track selected text\n  const [buttonEnabled, setButtonEnabled] = useState(false); // State to track button enable/disable\n  const { setIsLoading } = useLoading(); // Hook to trigger loading\n  // const { mintNFT } = useWallet(); // Get the mintNFT function from WalletContext\n  const navigate = useNavigate(); // Hook for navigation\n\n  // Function to handle text selection in the browser\n  const handleTextSelection = () => {\n    const selectedText = window.getSelection()?.toString() || \"\";\n    setSelectedText(selectedText);\n    setButtonEnabled(selectedText.length > 0); // Enable button if text is selected\n  };\n\n  // Listen for text selection in the window\n  useEffect(() => {\n    document.addEventListener(\"mouseup\", handleTextSelection);\n\n    // Cleanup event listener when component unmounts\n    return () => {\n      document.removeEventListener(\"mouseup\", handleTextSelection);\n    };\n  }, []);\n\n  const handleMint = async () => {\n    if (selectedText) {\n      setIsLoading(true); // Start loading\n\n      try {\n        // Step 1: Upload the selected text to IPFS\n        const contentID = await uploadToIPFS(selectedText);\n\n        if (contentID) {\n          console.log(\"IPFS content ID:\", contentID);\n\n          // Step 2: Send a request to your server's minting endpoint\n          const response = await fetch(\"http://localhost:3000/routes/mint\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              userWalletAddress: process.env.REACT_APP_USER_PUBLIC_KEY, // Replace with recipient wallet address\n              metadataURI: contentID, // Use the contentID from IPFS\n              tokenName: \"YourTokenName\", // Hardcode or dynamically generate\n              tokenLabel: \"YourTokenLabel\", // Hardcode or dynamically generate\n            }),\n          });\n\n          const result = await response.json();\n          if (result.success) {\n            console.log(\n              `NFT minted successfully with transaction hash: ${result.transactionHash}`\n            );\n          } else {\n            console.error(\"Minting failed:\", result.error);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error minting NFT or uploading to IPFS:\", error);\n      } finally {\n        setIsLoading(false); // Stop loading\n        navigate(\"/home\"); // Navigate to home page\n      }\n    }\n  };\n\n  return (\n    <Box\n      p={6}\n      width={theme.views.expandedView.width}\n      height={theme.views.expandedView.height}\n      mx=\"auto\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      gap={6}\n    >\n      {/* Heading */}\n      <Text fontSize=\"2xl\" fontWeight=\"bold\">\n        Highlight text to register it as IP\n      </Text>\n\n      {/* Image */}\n      <Image\n        src=\"/images/register-ip.png\" // Replace with the actual image path\n        alt=\"Register IP\"\n        maxW=\"100%\"\n        mb={4}\n      />\n\n      {/* Block of text to highlight */}\n      <Text fontSize=\"md\" textAlign=\"left\" width=\"100%\">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec\n        odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla\n        quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent\n        mauris. Fusce nec tellus sed augue semper porta. Mauris massa.\n        Vestibulum lacinia arcu eget nulla. Class aptent taciti sociosqu ad\n        litora torquent per conubia nostra, per inceptos himenaeos.\n      </Text>\n\n      {/* Mint button (grayed out until text is selected) */}\n      <Button\n        bg={buttonEnabled ? \"blue.500\" : \"gray.400\"}\n        color=\"white\"\n        _hover={buttonEnabled ? { bg: \"blue.600\" } : {}}\n        disabled={!buttonEnabled} // Disable button if no text is selected\n        width=\"100%\"\n        onClick={handleMint}\n      >\n        Mint Selected Text\n      </Button>\n    </Box>\n  );\n};\n\nexport default Register;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}