{"ast":null,"code":"import{ethers}from\"ethers\";// Load environment variables (private key and RPC URL)\nconst privateKey=process.env.REACT_APP_WALLET_PRIVATE_KEY;const rpcUrl=process.env.REACT_APP_POLYGON_RPC_URL;const userWalletAddress=process.env.REACT_APP_CONTRACT_ADDRESS;// Hardcoded address for now\nexport const mintNFT=async(recipient,metadataURI,tokenName,tokenLabel)=>{try{// Check if the browser has injected the Ethereum provider (like MetaMask)\nif(typeof window.ethereum!==\"undefined\"){const provider=new ethers.BrowserProvider(window.ethereum);// Use `await` to get the resolved signer\nconst signer=await provider.getSigner();const nftAbi=[\"function mintNFT(address recipient, string memory metadataURI, string memory tokenName, string memory tokenLabel) public returns (uint256)\"];const contractAddress=\"0xYourNFTContractAddress\";// Replace with your contract's address\nconst nftContract=new ethers.Contract(contractAddress,nftAbi,signer);// Call mintNFT with four arguments\nconst transaction=await nftContract.mintNFT(recipient,metadataURI,tokenName,tokenLabel);const receipt=await transaction.wait();console.log(`NFT minted! Transaction hash: ${receipt.transactionHash}`);}else{throw new Error(\"Ethereum provider not found. Please install MetaMask.\");}}catch(error){console.error(\"Error minting NFT:\",error);}};","map":{"version":3,"names":["ethers","privateKey","process","env","REACT_APP_WALLET_PRIVATE_KEY","rpcUrl","REACT_APP_POLYGON_RPC_URL","userWalletAddress","REACT_APP_CONTRACT_ADDRESS","mintNFT","recipient","metadataURI","tokenName","tokenLabel","window","ethereum","provider","BrowserProvider","signer","getSigner","nftAbi","contractAddress","nftContract","Contract","transaction","receipt","wait","console","log","transactionHash","Error","error"],"sources":["/Users/emmanasseri/Desktop/my-own-words/src/services/PolygonService.ts"],"sourcesContent":["import { ethers } from \"ethers\";\n\n// Load environment variables (private key and RPC URL)\nconst privateKey = process.env.REACT_APP_WALLET_PRIVATE_KEY;\nconst rpcUrl = process.env.REACT_APP_POLYGON_RPC_URL;\nconst userWalletAddress = process.env.REACT_APP_CONTRACT_ADDRESS; // Hardcoded address for now\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\nexport const mintNFT = async (\n  recipient: string,\n  metadataURI: string,\n  tokenName: string,\n  tokenLabel: string\n) => {\n  try {\n    // Check if the browser has injected the Ethereum provider (like MetaMask)\n    if (typeof window.ethereum !== \"undefined\") {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n\n      // Use `await` to get the resolved signer\n      const signer = await provider.getSigner();\n\n      const nftAbi = [\n        \"function mintNFT(address recipient, string memory metadataURI, string memory tokenName, string memory tokenLabel) public returns (uint256)\",\n      ];\n      const contractAddress = \"0xYourNFTContractAddress\"; // Replace with your contract's address\n\n      const nftContract = new ethers.Contract(contractAddress, nftAbi, signer);\n\n      // Call mintNFT with four arguments\n      const transaction = await nftContract.mintNFT(\n        recipient,\n        metadataURI,\n        tokenName,\n        tokenLabel\n      );\n      const receipt = await transaction.wait();\n      console.log(`NFT minted! Transaction hash: ${receipt.transactionHash}`);\n    } else {\n      throw new Error(\"Ethereum provider not found. Please install MetaMask.\");\n    }\n  } catch (error) {\n    console.error(\"Error minting NFT:\", error);\n  }\n};\n"],"mappings":"AAAA,OAASA,MAAM,KAAQ,QAAQ,CAE/B;AACA,KAAM,CAAAC,UAAU,CAAGC,OAAO,CAACC,GAAG,CAACC,4BAA4B,CAC3D,KAAM,CAAAC,MAAM,CAAGH,OAAO,CAACC,GAAG,CAACG,yBAAyB,CACpD,KAAM,CAAAC,iBAAiB,CAAGL,OAAO,CAACC,GAAG,CAACK,0BAA0B,CAAE;AAOlE,MAAO,MAAM,CAAAC,OAAO,CAAG,KAAAA,CACrBC,SAAiB,CACjBC,WAAmB,CACnBC,SAAiB,CACjBC,UAAkB,GACf,CACH,GAAI,CACF;AACA,GAAI,MAAO,CAAAC,MAAM,CAACC,QAAQ,GAAK,WAAW,CAAE,CAC1C,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAhB,MAAM,CAACiB,eAAe,CAACH,MAAM,CAACC,QAAQ,CAAC,CAE5D;AACA,KAAM,CAAAG,MAAM,CAAG,KAAM,CAAAF,QAAQ,CAACG,SAAS,CAAC,CAAC,CAEzC,KAAM,CAAAC,MAAM,CAAG,CACb,4IAA4I,CAC7I,CACD,KAAM,CAAAC,eAAe,CAAG,0BAA0B,CAAE;AAEpD,KAAM,CAAAC,WAAW,CAAG,GAAI,CAAAtB,MAAM,CAACuB,QAAQ,CAACF,eAAe,CAAED,MAAM,CAAEF,MAAM,CAAC,CAExE;AACA,KAAM,CAAAM,WAAW,CAAG,KAAM,CAAAF,WAAW,CAACb,OAAO,CAC3CC,SAAS,CACTC,WAAW,CACXC,SAAS,CACTC,UACF,CAAC,CACD,KAAM,CAAAY,OAAO,CAAG,KAAM,CAAAD,WAAW,CAACE,IAAI,CAAC,CAAC,CACxCC,OAAO,CAACC,GAAG,CAAC,iCAAiCH,OAAO,CAACI,eAAe,EAAE,CAAC,CACzE,CAAC,IAAM,CACL,KAAM,IAAI,CAAAC,KAAK,CAAC,uDAAuD,CAAC,CAC1E,CACF,CAAE,MAAOC,KAAK,CAAE,CACdJ,OAAO,CAACI,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC5C,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}