{"ast":null,"code":"import { toHex } from '../utils/encoding/toHex.js';\nimport { privateKeyToAccount } from './privateKeyToAccount.js';\n/**\n * @description Creates an Account from a HD Key.\n *\n * @returns A HD Account.\n */\nexport function hdKeyToAccount(hdKey_) {\n  let {\n    accountIndex = 0,\n    addressIndex = 0,\n    changeIndex = 0,\n    path,\n    ...options\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const hdKey = hdKey_.derive(path || `m/44'/60'/${accountIndex}'/${changeIndex}/${addressIndex}`);\n  const account = privateKeyToAccount(toHex(hdKey.privateKey), options);\n  return {\n    ...account,\n    getHdKey: () => hdKey,\n    source: 'hd'\n  };\n}","map":{"version":3,"names":["toHex","privateKeyToAccount","hdKeyToAccount","hdKey_","accountIndex","addressIndex","changeIndex","path","options","arguments","length","undefined","hdKey","derive","account","privateKey","getHdKey","source"],"sources":["/Users/emmanasseri/Desktop/my-own-words/client/node_modules/viem/accounts/hdKeyToAccount.ts"],"sourcesContent":["import { type ToHexErrorType, toHex } from '../utils/encoding/toHex.js'\n\nimport type { ErrorType } from '../errors/utils.js'\nimport type { HDKey } from '../types/account.js'\nimport {\n  type PrivateKeyToAccountErrorType,\n  type PrivateKeyToAccountOptions,\n  privateKeyToAccount,\n} from './privateKeyToAccount.js'\nimport type { HDAccount, HDOptions } from './types.js'\n\nexport type HDKeyToAccountOptions = HDOptions & PrivateKeyToAccountOptions\n\nexport type HDKeyToAccountErrorType =\n  | PrivateKeyToAccountErrorType\n  | ToHexErrorType\n  | ErrorType\n\n/**\n * @description Creates an Account from a HD Key.\n *\n * @returns A HD Account.\n */\nexport function hdKeyToAccount(\n  hdKey_: HDKey,\n  {\n    accountIndex = 0,\n    addressIndex = 0,\n    changeIndex = 0,\n    path,\n    ...options\n  }: HDKeyToAccountOptions = {},\n): HDAccount {\n  const hdKey = hdKey_.derive(\n    path || `m/44'/60'/${accountIndex}'/${changeIndex}/${addressIndex}`,\n  )\n  const account = privateKeyToAccount(toHex(hdKey.privateKey!), options)\n  return {\n    ...account,\n    getHdKey: () => hdKey,\n    source: 'hd',\n  }\n}\n"],"mappings":"AAAA,SAA8BA,KAAK,QAAQ,4BAA4B;AAIvE,SAGEC,mBAAmB,QACd,0BAA0B;AAUjC;;;;;AAKA,OAAM,SAAUC,cAAcA,CAC5BC,MAAa,EAOgB;EAAA,IAN7B;IACEC,YAAY,GAAG,CAAC;IAChBC,YAAY,GAAG,CAAC;IAChBC,WAAW,GAAG,CAAC;IACfC,IAAI;IACJ,GAAGC;EAAO,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MACe,EAAE;EAE7B,MAAMG,KAAK,GAAGT,MAAM,CAACU,MAAM,CACzBN,IAAI,IAAI,aAAaH,YAAY,KAAKE,WAAW,IAAID,YAAY,EAAE,CACpE;EACD,MAAMS,OAAO,GAAGb,mBAAmB,CAACD,KAAK,CAACY,KAAK,CAACG,UAAW,CAAC,EAAEP,OAAO,CAAC;EACtE,OAAO;IACL,GAAGM,OAAO;IACVE,QAAQ,EAAEA,CAAA,KAAMJ,KAAK;IACrBK,MAAM,EAAE;GACT;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}