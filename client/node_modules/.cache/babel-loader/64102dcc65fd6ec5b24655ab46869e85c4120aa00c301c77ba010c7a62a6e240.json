{"ast":null,"code":"import { hashMessage } from '../../utils/signature/hashMessage.js';\nimport { verifyHash } from './verifyHash.js';\n/**\n * Verify that a message was signed by the provided address.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage(client, _ref) {\n  let {\n    address,\n    message,\n    factory,\n    factoryData,\n    signature,\n    ...callRequest\n  } = _ref;\n  const hash = hashMessage(message);\n  return verifyHash(client, {\n    address,\n    factory: factory,\n    factoryData: factoryData,\n    hash,\n    signature,\n    ...callRequest\n  });\n}","map":{"version":3,"names":["hashMessage","verifyHash","verifyMessage","client","_ref","address","message","factory","factoryData","signature","callRequest","hash"],"sources":["/Users/emmanasseri/Desktop/my-own-words/node_modules/viem/actions/public/verifyMessage.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ByteArray,\n  Hex,\n  SignableMessage,\n  Signature,\n} from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { hashMessage } from '../../utils/signature/hashMessage.js'\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from './verifyHash.js'\n\nexport type VerifyMessageParameters = Prettify<\n  Omit<VerifyHashParameters, 'hash'> & {\n    /** The address that signed the original message. */\n    address: Address\n    /** The message to be verified. */\n    message: SignableMessage\n    /** The signature that was generated by signing the message with the address's private key. */\n    signature: Hex | ByteArray | Signature\n  }\n>\n\nexport type VerifyMessageReturnType = boolean\n\nexport type VerifyMessageErrorType =\n  | HashMessageErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    address,\n    message,\n    factory,\n    factoryData,\n    signature,\n    ...callRequest\n  }: VerifyMessageParameters,\n): Promise<VerifyMessageReturnType> {\n  const hash = hashMessage(message)\n  return verifyHash(client, {\n    address,\n    factory: factory!,\n    factoryData: factoryData!,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n"],"mappings":"AAaA,SAASA,WAAW,QAAQ,sCAAsC;AAElE,SAGEC,UAAU,QACL,iBAAiB;AAoBxB;;;;;;;;;;;AAWA,OAAO,eAAeC,aAAaA,CACjCC,MAAgC,EAAAC,IAAA,EAQN;EAAA,IAP1B;IACEC,OAAO;IACPC,OAAO;IACPC,OAAO;IACPC,WAAW;IACXC,SAAS;IACT,GAAGC;EAAW,CACU,GAAAN,IAAA;EAE1B,MAAMO,IAAI,GAAGX,WAAW,CAACM,OAAO,CAAC;EACjC,OAAOL,UAAU,CAACE,MAAM,EAAE;IACxBE,OAAO;IACPE,OAAO,EAAEA,OAAQ;IACjBC,WAAW,EAAEA,WAAY;IACzBG,IAAI;IACJF,SAAS;IACT,GAAGC;GACJ,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}