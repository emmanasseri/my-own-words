{"ast":null,"code":"import { versionedHashVersionKzg } from '../constants/kzg.js';\nimport { BaseError } from './base.js';\nexport class BlobSizeTooLargeError extends BaseError {\n  constructor(_ref) {\n    let {\n      maxSize,\n      size\n    } = _ref;\n    super('Blob size is too large.', {\n      metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\n      name: 'BlobSizeTooLargeError'\n    });\n  }\n}\nexport class EmptyBlobError extends BaseError {\n  constructor() {\n    super('Blob data must not be empty.', {\n      name: 'EmptyBlobError'\n    });\n  }\n}\nexport class InvalidVersionedHashSizeError extends BaseError {\n  constructor(_ref2) {\n    let {\n      hash,\n      size\n    } = _ref2;\n    super(`Versioned hash \"${hash}\" size is invalid.`, {\n      metaMessages: ['Expected: 32', `Received: ${size}`],\n      name: 'InvalidVersionedHashSizeError'\n    });\n  }\n}\nexport class InvalidVersionedHashVersionError extends BaseError {\n  constructor(_ref3) {\n    let {\n      hash,\n      version\n    } = _ref3;\n    super(`Versioned hash \"${hash}\" version is invalid.`, {\n      metaMessages: [`Expected: ${versionedHashVersionKzg}`, `Received: ${version}`],\n      name: 'InvalidVersionedHashVersionError'\n    });\n  }\n}","map":{"version":3,"names":["versionedHashVersionKzg","BaseError","BlobSizeTooLargeError","constructor","_ref","maxSize","size","metaMessages","name","EmptyBlobError","InvalidVersionedHashSizeError","_ref2","hash","InvalidVersionedHashVersionError","_ref3","version"],"sources":["/Users/emmanasseri/Desktop/my-own-words/node_modules/viem/errors/blob.ts"],"sourcesContent":["import { versionedHashVersionKzg } from '../constants/kzg.js'\nimport type { Hash } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type BlobSizeTooLargeErrorType = BlobSizeTooLargeError & {\n  name: 'BlobSizeTooLargeError'\n}\nexport class BlobSizeTooLargeError extends BaseError {\n  constructor({ maxSize, size }: { maxSize: number; size: number }) {\n    super('Blob size is too large.', {\n      metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\n      name: 'BlobSizeTooLargeError',\n    })\n  }\n}\n\nexport type EmptyBlobErrorType = EmptyBlobError & {\n  name: 'EmptyBlobError'\n}\nexport class EmptyBlobError extends BaseError {\n  constructor() {\n    super('Blob data must not be empty.', { name: 'EmptyBlobError' })\n  }\n}\n\nexport type InvalidVersionedHashSizeErrorType =\n  InvalidVersionedHashSizeError & {\n    name: 'InvalidVersionedHashSizeError'\n  }\nexport class InvalidVersionedHashSizeError extends BaseError {\n  constructor({\n    hash,\n    size,\n  }: {\n    hash: Hash\n    size: number\n  }) {\n    super(`Versioned hash \"${hash}\" size is invalid.`, {\n      metaMessages: ['Expected: 32', `Received: ${size}`],\n      name: 'InvalidVersionedHashSizeError',\n    })\n  }\n}\n\nexport type InvalidVersionedHashVersionErrorType =\n  InvalidVersionedHashVersionError & {\n    name: 'InvalidVersionedHashVersionError'\n  }\nexport class InvalidVersionedHashVersionError extends BaseError {\n  constructor({\n    hash,\n    version,\n  }: {\n    hash: Hash\n    version: number\n  }) {\n    super(`Versioned hash \"${hash}\" version is invalid.`, {\n      metaMessages: [\n        `Expected: ${versionedHashVersionKzg}`,\n        `Received: ${version}`,\n      ],\n      name: 'InvalidVersionedHashVersionError',\n    })\n  }\n}\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,qBAAqB;AAG7D,SAASC,SAAS,QAAQ,WAAW;AAKrC,OAAM,MAAOC,qBAAsB,SAAQD,SAAS;EAClDE,YAAAC,IAAA,EAAgE;IAAA,IAApD;MAAEC,OAAO;MAAEC;IAAI,CAAqC,GAAAF,IAAA;IAC9D,KAAK,CAAC,yBAAyB,EAAE;MAC/BG,YAAY,EAAE,CAAC,QAAQF,OAAO,QAAQ,EAAE,UAAUC,IAAI,QAAQ,CAAC;MAC/DE,IAAI,EAAE;KACP,CAAC;EACJ;;AAMF,OAAM,MAAOC,cAAe,SAAQR,SAAS;EAC3CE,YAAA;IACE,KAAK,CAAC,8BAA8B,EAAE;MAAEK,IAAI,EAAE;IAAgB,CAAE,CAAC;EACnE;;AAOF,OAAM,MAAOE,6BAA8B,SAAQT,SAAS;EAC1DE,YAAAQ,KAAA,EAMC;IAAA,IANW;MACVC,IAAI;MACJN;IAAI,CAIL,GAAAK,KAAA;IACC,KAAK,CAAC,mBAAmBC,IAAI,oBAAoB,EAAE;MACjDL,YAAY,EAAE,CAAC,cAAc,EAAE,aAAaD,IAAI,EAAE,CAAC;MACnDE,IAAI,EAAE;KACP,CAAC;EACJ;;AAOF,OAAM,MAAOK,gCAAiC,SAAQZ,SAAS;EAC7DE,YAAAW,KAAA,EAMC;IAAA,IANW;MACVF,IAAI;MACJG;IAAO,CAIR,GAAAD,KAAA;IACC,KAAK,CAAC,mBAAmBF,IAAI,uBAAuB,EAAE;MACpDL,YAAY,EAAE,CACZ,aAAaP,uBAAuB,EAAE,EACtC,aAAae,OAAO,EAAE,CACvB;MACDP,IAAI,EAAE;KACP,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}