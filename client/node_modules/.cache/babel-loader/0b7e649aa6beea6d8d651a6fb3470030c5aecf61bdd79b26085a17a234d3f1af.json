{"ast":null,"code":"import axios from\"axios\";import{useLoading}from\"../../contexts/LoadingContext\";const PINATA_JWT=process.env.REACT_APP_PINATA_JWT;// Function to upload the text to IPFS\nexport const uploadToIPFS=async text=>{const{setIsLoading}=useLoading();// Use the loading hook\nconst url=`https://api.pinata.cloud/pinning/pinJSONToIPFS`;const data={text};try{// Start loading when the process begins\nsetIsLoading(true);// Upload to IPFS\nconst response=await axios.post(url,data,{headers:{Authorization:`Bearer ${PINATA_JWT}`,// Ensure the JWT is passed correctly\n\"Content-Type\":\"application/json\"}});if(response.status===200){const ipfsHash=response.data.IpfsHash;console.log(\"Uploaded to IPFS: \",ipfsHash);// Call the minting function after uploading to IPFS\nawait mintOnServer(ipfsHash);// Stop loading when the operation is complete\nsetIsLoading(false);return ipfsHash;// Return the content ID (CID)\n}else{console.error(\"Failed to upload to IPFS: \",response.status);setIsLoading(false);// Stop loading on error\nreturn null;}}catch(error){console.error(\"Error uploading to IPFS:\",error);setIsLoading(false);// Stop loading on error\nreturn null;}};// Function to mint the NFT on the server\nconst mintOnServer=async ipfsHash=>{const{setIsLoading}=useLoading();// Use the loading hook\ntry{// Start loading before minting\nsetIsLoading(true);// Make the POST request to the server\nconst response=await fetch(\"http://localhost:3000/api/mint\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({userWalletAddress:process.env.REACT_APP_USER_PUBLIC_KEY,metadataURI:ipfsHash,tokenName:\"hardcoded\",tokenLabel:\"hardcoded\"})});const result=await response.json();console.log(\"Minting result:\",result);// Stop loading after the operation is complete\nsetIsLoading(false);}catch(error){console.error(\"Error minting NFT on server:\",error);// Stop loading on error\nsetIsLoading(false);}};","map":{"version":3,"names":["axios","useLoading","PINATA_JWT","process","env","REACT_APP_PINATA_JWT","uploadToIPFS","text","setIsLoading","url","data","response","post","headers","Authorization","status","ipfsHash","IpfsHash","console","log","mintOnServer","error","fetch","method","body","JSON","stringify","userWalletAddress","REACT_APP_USER_PUBLIC_KEY","metadataURI","tokenName","tokenLabel","result","json"],"sources":["/Users/emmanasseri/Desktop/my-own-words/client/src/components/Register/Mint.tsx"],"sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport { useLoading } from \"../../contexts/LoadingContext\";\n\nconst PINATA_JWT = process.env.REACT_APP_PINATA_JWT;\n\n// Function to upload the text to IPFS\nexport const uploadToIPFS = async (text: string): Promise<string | null> => {\n  const { setIsLoading } = useLoading(); // Use the loading hook\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n\n  const data = { text };\n\n  try {\n    // Start loading when the process begins\n    setIsLoading(true);\n\n    // Upload to IPFS\n    const response = await axios.post(url, data, {\n      headers: {\n        Authorization: `Bearer ${PINATA_JWT}`, // Ensure the JWT is passed correctly\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (response.status === 200) {\n      const ipfsHash = response.data.IpfsHash;\n      console.log(\"Uploaded to IPFS: \", ipfsHash);\n\n      // Call the minting function after uploading to IPFS\n      await mintOnServer(ipfsHash);\n\n      // Stop loading when the operation is complete\n      setIsLoading(false);\n\n      return ipfsHash; // Return the content ID (CID)\n    } else {\n      console.error(\"Failed to upload to IPFS: \", response.status);\n      setIsLoading(false); // Stop loading on error\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error uploading to IPFS:\", error);\n    setIsLoading(false); // Stop loading on error\n    return null;\n  }\n};\n\n// Function to mint the NFT on the server\nconst mintOnServer = async (ipfsHash: string) => {\n  const { setIsLoading } = useLoading(); // Use the loading hook\n\n  try {\n    // Start loading before minting\n    setIsLoading(true);\n\n    // Make the POST request to the server\n    const response = await fetch(\"http://localhost:3000/api/mint\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        userWalletAddress: process.env.REACT_APP_USER_PUBLIC_KEY,\n        metadataURI: ipfsHash,\n        tokenName: \"hardcoded\",\n        tokenLabel: \"hardcoded\",\n      }),\n    });\n\n    const result = await response.json();\n    console.log(\"Minting result:\", result);\n\n    // Stop loading after the operation is complete\n    setIsLoading(false);\n  } catch (error) {\n    console.error(\"Error minting NFT on server:\", error);\n\n    // Stop loading on error\n    setIsLoading(false);\n  }\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,OAASC,UAAU,KAAQ,+BAA+B,CAE1D,KAAM,CAAAC,UAAU,CAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAEnD;AACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,IAAY,EAA6B,CAC1E,KAAM,CAAEC,YAAa,CAAC,CAAGP,UAAU,CAAC,CAAC,CAAE;AACvC,KAAM,CAAAQ,GAAG,CAAG,gDAAgD,CAE5D,KAAM,CAAAC,IAAI,CAAG,CAAEH,IAAK,CAAC,CAErB,GAAI,CACF;AACAC,YAAY,CAAC,IAAI,CAAC,CAElB;AACA,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAX,KAAK,CAACY,IAAI,CAACH,GAAG,CAAEC,IAAI,CAAE,CAC3CG,OAAO,CAAE,CACPC,aAAa,CAAE,UAAUZ,UAAU,EAAE,CAAE;AACvC,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,GAAIS,QAAQ,CAACI,MAAM,GAAK,GAAG,CAAE,CAC3B,KAAM,CAAAC,QAAQ,CAAGL,QAAQ,CAACD,IAAI,CAACO,QAAQ,CACvCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEH,QAAQ,CAAC,CAE3C;AACA,KAAM,CAAAI,YAAY,CAACJ,QAAQ,CAAC,CAE5B;AACAR,YAAY,CAAC,KAAK,CAAC,CAEnB,MAAO,CAAAQ,QAAQ,CAAE;AACnB,CAAC,IAAM,CACLE,OAAO,CAACG,KAAK,CAAC,4BAA4B,CAAEV,QAAQ,CAACI,MAAM,CAAC,CAC5DP,YAAY,CAAC,KAAK,CAAC,CAAE;AACrB,MAAO,KAAI,CACb,CACF,CAAE,MAAOa,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChDb,YAAY,CAAC,KAAK,CAAC,CAAE;AACrB,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA,KAAM,CAAAY,YAAY,CAAG,KAAO,CAAAJ,QAAgB,EAAK,CAC/C,KAAM,CAAER,YAAa,CAAC,CAAGP,UAAU,CAAC,CAAC,CAAE;AAEvC,GAAI,CACF;AACAO,YAAY,CAAC,IAAI,CAAC,CAElB;AACA,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAW,KAAK,CAAC,gCAAgC,CAAE,CAC7DC,MAAM,CAAE,MAAM,CACdV,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDW,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,iBAAiB,CAAExB,OAAO,CAACC,GAAG,CAACwB,yBAAyB,CACxDC,WAAW,CAAEb,QAAQ,CACrBc,SAAS,CAAE,WAAW,CACtBC,UAAU,CAAE,WACd,CAAC,CACH,CAAC,CAAC,CAEF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAArB,QAAQ,CAACsB,IAAI,CAAC,CAAC,CACpCf,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAEa,MAAM,CAAC,CAEtC;AACAxB,YAAY,CAAC,KAAK,CAAC,CACrB,CAAE,MAAOa,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CAEpD;AACAb,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}