{"ast":null,"code":"import React,{createContext,useContext}from\"react\";import{mintNFT as mintNFTService}from\"../services/PolygonService\";import{jsx as _jsx}from\"react/jsx-runtime\";const WalletContext=/*#__PURE__*/createContext(undefined);export const WalletProvider=_ref=>{let{children}=_ref;const userWalletAddress=process.env.REACT_APP_USER_WALLET_ADDRESS;const mintNFT=async(contentID,tokenName,tokenLabel)=>{// Call mintNFT from PolygonService and pass the userWalletAddress as recipient\nawait mintNFTService(userWalletAddress,contentID,tokenName,tokenLabel);};return/*#__PURE__*/_jsx(WalletContext.Provider,{value:{userWalletAddress,mintNFT},children:children});};export const useWallet=()=>{const context=useContext(WalletContext);if(!context){throw new Error(\"useWallet must be used within a WalletProvider\");}return context;};","map":{"version":3,"names":["React","createContext","useContext","mintNFT","mintNFTService","jsx","_jsx","WalletContext","undefined","WalletProvider","_ref","children","userWalletAddress","process","env","REACT_APP_USER_WALLET_ADDRESS","contentID","tokenName","tokenLabel","Provider","value","useWallet","context","Error"],"sources":["/Users/emmanasseri/Desktop/my-own-words/client/src/contexts/WalletContext.tsx"],"sourcesContent":["import React, { createContext, useContext } from \"react\";\nimport { mintNFT as mintNFTService } from \"../services/PolygonService\";\n\ninterface WalletContextProps {\n  userWalletAddress: string;\n  mintNFT: (\n    contentID: string,\n    tokenName: string,\n    tokenLabel: string\n  ) => Promise<void>;\n}\n\nconst WalletContext = createContext<WalletContextProps | undefined>(undefined);\n\nexport const WalletProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const userWalletAddress = process.env.REACT_APP_USER_WALLET_ADDRESS!;\n\n  const mintNFT = async (\n    contentID: string,\n    tokenName: string,\n    tokenLabel: string\n  ) => {\n    // Call mintNFT from PolygonService and pass the userWalletAddress as recipient\n    await mintNFTService(userWalletAddress, contentID, tokenName, tokenLabel);\n  };\n\n  return (\n    <WalletContext.Provider value={{ userWalletAddress, mintNFT }}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n\nexport const useWallet = () => {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within a WalletProvider\");\n  }\n  return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,KAAQ,OAAO,CACxD,OAASC,OAAO,GAAI,CAAAC,cAAc,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAWvE,KAAM,CAAAC,aAAa,cAAGN,aAAa,CAAiCO,SAAS,CAAC,CAE9E,MAAO,MAAM,CAAAC,cAAuD,CAAGC,IAAA,EAEjE,IAFkE,CACtEC,QACF,CAAC,CAAAD,IAAA,CACC,KAAM,CAAAE,iBAAiB,CAAGC,OAAO,CAACC,GAAG,CAACC,6BAA8B,CAEpE,KAAM,CAAAZ,OAAO,CAAG,KAAAA,CACda,SAAiB,CACjBC,SAAiB,CACjBC,UAAkB,GACf,CACH;AACA,KAAM,CAAAd,cAAc,CAACQ,iBAAiB,CAAEI,SAAS,CAAEC,SAAS,CAAEC,UAAU,CAAC,CAC3E,CAAC,CAED,mBACEZ,IAAA,CAACC,aAAa,CAACY,QAAQ,EAACC,KAAK,CAAE,CAAER,iBAAiB,CAAET,OAAQ,CAAE,CAAAQ,QAAA,CAC3DA,QAAQ,CACa,CAAC,CAE7B,CAAC,CAED,MAAO,MAAM,CAAAU,SAAS,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAC,OAAO,CAAGpB,UAAU,CAACK,aAAa,CAAC,CACzC,GAAI,CAACe,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,gDAAgD,CAAC,CACnE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}