{"ast":null,"code":"import { hashAuthorization } from '../../experimental/eip7702/utils/hashAuthorization.js';\nimport { sign } from './sign.js';\n/**\n * Signs an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport async function experimental_signAuthorization(parameters) {\n  const {\n    contractAddress,\n    chainId,\n    nonce,\n    privateKey,\n    to = 'object'\n  } = parameters;\n  const signature = await sign({\n    hash: hashAuthorization({\n      contractAddress,\n      chainId,\n      nonce\n    }),\n    privateKey,\n    to\n  });\n  if (to === 'object') return {\n    contractAddress,\n    chainId,\n    nonce,\n    ...signature\n  };\n  return signature;\n}","map":{"version":3,"names":["hashAuthorization","sign","experimental_signAuthorization","parameters","contractAddress","chainId","nonce","privateKey","to","signature","hash"],"sources":["/Users/emmanasseri/Desktop/my-own-words/node_modules/viem/accounts/utils/signAuthorization.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type {\n  Authorization,\n  SignedAuthorization,\n} from '../../experimental/eip7702/types/authorization.js'\nimport {\n  type HashAuthorizationErrorType,\n  hashAuthorization,\n} from '../../experimental/eip7702/utils/hashAuthorization.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport {\n  type SignErrorType,\n  type SignParameters,\n  type SignReturnType,\n  sign,\n} from './sign.js'\n\ntype To = 'object' | 'bytes' | 'hex'\n\nexport type SignAuthorizationParameters<to extends To = 'object'> =\n  Authorization & {\n    /** The private key to sign with. */\n    privateKey: Hex\n    to?: SignParameters<to>['to'] | undefined\n  }\n\nexport type SignAuthorizationReturnType<to extends To = 'object'> = Prettify<\n  to extends 'object' ? SignedAuthorization : SignReturnType<to>\n>\n\nexport type SignAuthorizationErrorType =\n  | SignErrorType\n  | HashAuthorizationErrorType\n  | ErrorType\n\n/**\n * Signs an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n */\nexport async function experimental_signAuthorization<to extends To = 'object'>(\n  parameters: SignAuthorizationParameters<to>,\n): Promise<SignAuthorizationReturnType<to>> {\n  const {\n    contractAddress,\n    chainId,\n    nonce,\n    privateKey,\n    to = 'object',\n  } = parameters\n  const signature = await sign({\n    hash: hashAuthorization({ contractAddress, chainId, nonce }),\n    privateKey,\n    to,\n  })\n  if (to === 'object')\n    return {\n      contractAddress,\n      chainId,\n      nonce,\n      ...(signature as Signature),\n    } as any\n  return signature as any\n}\n"],"mappings":"AAKA,SAEEA,iBAAiB,QACZ,uDAAuD;AAG9D,SAIEC,IAAI,QACC,WAAW;AAoBlB;;;AAGA,OAAO,eAAeC,8BAA8BA,CAClDC,UAA2C;EAE3C,MAAM;IACJC,eAAe;IACfC,OAAO;IACPC,KAAK;IACLC,UAAU;IACVC,EAAE,GAAG;EAAQ,CACd,GAAGL,UAAU;EACd,MAAMM,SAAS,GAAG,MAAMR,IAAI,CAAC;IAC3BS,IAAI,EAAEV,iBAAiB,CAAC;MAAEI,eAAe;MAAEC,OAAO;MAAEC;IAAK,CAAE,CAAC;IAC5DC,UAAU;IACVC;GACD,CAAC;EACF,IAAIA,EAAE,KAAK,QAAQ,EACjB,OAAO;IACLJ,eAAe;IACfC,OAAO;IACPC,KAAK;IACL,GAAIG;GACE;EACV,OAAOA,SAAgB;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}