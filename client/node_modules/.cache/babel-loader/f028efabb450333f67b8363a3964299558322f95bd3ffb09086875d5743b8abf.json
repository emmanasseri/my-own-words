{"ast":null,"code":"/**\n * Scopes `request` to the filter ID. If the client is a fallback, it will\n * listen for responses and scope the child transport `request` function\n * to the successful filter ID.\n */\nexport function createFilterRequestScope(client, _ref) {\n  let {\n    method\n  } = _ref;\n  const requestMap = {};\n  if (client.transport.type === 'fallback') client.transport.onResponse?.(_ref2 => {\n    let {\n      method: method_,\n      response: id,\n      status,\n      transport\n    } = _ref2;\n    if (status === 'success' && method === method_) requestMap[id] = transport.request;\n  });\n  return id => requestMap[id] || client.request;\n}","map":{"version":3,"names":["createFilterRequestScope","client","_ref","method","requestMap","transport","type","onResponse","_ref2","method_","response","id","status","request"],"sources":["/Users/emmanasseri/Desktop/my-own-words/client/node_modules/viem/utils/filters/createFilterRequestScope.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { OnResponseFn } from '../../clients/transports/fallback.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { PublicRpcSchema } from '../../types/eip1193.js'\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Filter } from '../../types/utils.js'\n\ntype CreateFilterRequestScopeParameters = {\n  method:\n    | 'eth_newFilter'\n    | 'eth_newPendingTransactionFilter'\n    | 'eth_newBlockFilter'\n}\n\ntype FilterRpcSchema = Filter<\n  PublicRpcSchema,\n  { Method: 'eth_getFilterLogs' | 'eth_getFilterChanges' }\n>\n\ntype CreateFilterRequestScopeReturnType = (\n  id: Hex,\n) => EIP1193RequestFn<FilterRpcSchema>\n\n/**\n * Scopes `request` to the filter ID. If the client is a fallback, it will\n * listen for responses and scope the child transport `request` function\n * to the successful filter ID.\n */\nexport function createFilterRequestScope<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  { method }: CreateFilterRequestScopeParameters,\n): CreateFilterRequestScopeReturnType {\n  const requestMap: Record<Hex, EIP1193RequestFn> = {}\n\n  if (client.transport.type === 'fallback')\n    client.transport.onResponse?.(\n      ({\n        method: method_,\n        response: id,\n        status,\n        transport,\n      }: Parameters<OnResponseFn>[0]) => {\n        if (status === 'success' && method === method_)\n          requestMap[id as Hex] = transport.request\n      },\n    )\n\n  return ((id) =>\n    requestMap[id] || client.request) as CreateFilterRequestScopeReturnType\n}\n"],"mappings":"AAyBA;;;;;AAKA,OAAM,SAAUA,wBAAwBA,CACtCC,MAAgC,EAAAC,IAAA,EACc;EAAA,IAA9C;IAAEC;EAAM,CAAsC,GAAAD,IAAA;EAE9C,MAAME,UAAU,GAAkC,EAAE;EAEpD,IAAIH,MAAM,CAACI,SAAS,CAACC,IAAI,KAAK,UAAU,EACtCL,MAAM,CAACI,SAAS,CAACE,UAAU,GACzBC,KAAA,IAKkC;IAAA,IALjC;MACCL,MAAM,EAAEM,OAAO;MACfC,QAAQ,EAAEC,EAAE;MACZC,MAAM;MACNP;IAAS,CACmB,GAAAG,KAAA;IAC5B,IAAII,MAAM,KAAK,SAAS,IAAIT,MAAM,KAAKM,OAAO,EAC5CL,UAAU,CAACO,EAAS,CAAC,GAAGN,SAAS,CAACQ,OAAO;EAC7C,CAAC,CACF;EAEH,OAASF,EAAE,IACTP,UAAU,CAACO,EAAE,CAAC,IAAIV,MAAM,CAACY,OAAO;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}